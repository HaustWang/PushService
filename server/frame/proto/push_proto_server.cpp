// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_proto_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "push_proto_server.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SvrMsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrMsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrRegRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrRegRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrRegResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrRegResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrUpdateUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrUpdateUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrUserMsgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrUserMsgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrUserReadMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrUserReadMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrTransferMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrTransferMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrHeartbeatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrHeartbeatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrInsertMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrInsertMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrConfigReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrConfigReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrConfigResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrConfigResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrBroadcastAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrBroadcastAddress_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SvrMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_push_5fproto_5fserver_2eproto() {
  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "push_proto_server.proto");
  GOOGLE_CHECK(file != NULL);
  SvrMsgHead_descriptor_ = file->message_type(0);
  static const int SvrMsgHead_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, src_svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, src_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, dst_svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, dst_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, proxy_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, is_broadcast_),
  };
  SvrMsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrMsgHead_descriptor_,
      SvrMsgHead::default_instance_,
      SvrMsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrMsgHead));
  SvrMsg_descriptor_ = file->message_type(1);
  static const int SvrMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsg, body_),
  };
  SvrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrMsg_descriptor_,
      SvrMsg::default_instance_,
      SvrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrMsg));
  SvrRegRequest_descriptor_ = file->message_type(2);
  static const int SvrRegRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrRegRequest, svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrRegRequest, svr_type_),
  };
  SvrRegRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrRegRequest_descriptor_,
      SvrRegRequest::default_instance_,
      SvrRegRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrRegRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrRegRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrRegRequest));
  SvrRegResponse_descriptor_ = file->message_type(3);
  static const int SvrRegResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrRegResponse, result_),
  };
  SvrRegResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrRegResponse_descriptor_,
      SvrRegResponse::default_instance_,
      SvrRegResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrRegResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrRegResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrRegResponse));
  SvrUpdateUser_descriptor_ = file->message_type(4);
  static const int SvrUpdateUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUpdateUser, connector_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUpdateUser, is_online_),
  };
  SvrUpdateUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrUpdateUser_descriptor_,
      SvrUpdateUser::default_instance_,
      SvrUpdateUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUpdateUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUpdateUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrUpdateUser));
  SvrUserMsgAck_descriptor_ = file->message_type(5);
  static const int SvrUserMsgAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUserMsgAck, msgid_),
  };
  SvrUserMsgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrUserMsgAck_descriptor_,
      SvrUserMsgAck::default_instance_,
      SvrUserMsgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUserMsgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUserMsgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrUserMsgAck));
  SvrUserReadMsg_descriptor_ = file->message_type(6);
  static const int SvrUserReadMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUserReadMsg, msgid_),
  };
  SvrUserReadMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrUserReadMsg_descriptor_,
      SvrUserReadMsg::default_instance_,
      SvrUserReadMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUserReadMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrUserReadMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrUserReadMsg));
  SvrTransferMsg_descriptor_ = file->message_type(7);
  static const int SvrTransferMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrTransferMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrTransferMsg, content_),
  };
  SvrTransferMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrTransferMsg_descriptor_,
      SvrTransferMsg::default_instance_,
      SvrTransferMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrTransferMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrTransferMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrTransferMsg));
  SvrHeartbeatMsg_descriptor_ = file->message_type(8);
  static const int SvrHeartbeatMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrHeartbeatMsg, time_),
  };
  SvrHeartbeatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrHeartbeatMsg_descriptor_,
      SvrHeartbeatMsg::default_instance_,
      SvrHeartbeatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrHeartbeatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrHeartbeatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrHeartbeatMsg));
  SvrInsertMsg_descriptor_ = file->message_type(9);
  static const int SvrInsertMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrInsertMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrInsertMsg, client_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrInsertMsg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrInsertMsg, expire_time_),
  };
  SvrInsertMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrInsertMsg_descriptor_,
      SvrInsertMsg::default_instance_,
      SvrInsertMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrInsertMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrInsertMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrInsertMsg));
  SvrAddress_descriptor_ = file->message_type(10);
  static const int SvrAddress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrAddress, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrAddress, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrAddress, port_),
  };
  SvrAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrAddress_descriptor_,
      SvrAddress::default_instance_,
      SvrAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrAddress));
  SvrConfigReq_descriptor_ = file->message_type(11);
  static const int SvrConfigReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfigReq, address_),
  };
  SvrConfigReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrConfigReq_descriptor_,
      SvrConfigReq::default_instance_,
      SvrConfigReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfigReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfigReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrConfigReq));
  SvrConfig_descriptor_ = file->message_type(12);
  static const int SvrConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, log_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, log_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, log_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, http_listen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, php_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, php_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, client_outoftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, redis_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, redis_port_),
  };
  SvrConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrConfig_descriptor_,
      SvrConfig::default_instance_,
      SvrConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrConfig));
  SvrConfigResp_descriptor_ = file->message_type(13);
  static const int SvrConfigResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfigResp, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfigResp, peer_addresses_),
  };
  SvrConfigResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrConfigResp_descriptor_,
      SvrConfigResp::default_instance_,
      SvrConfigResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfigResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrConfigResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrConfigResp));
  SvrBroadcastAddress_descriptor_ = file->message_type(14);
  static const int SvrBroadcastAddress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrBroadcastAddress, peer_addresses_),
  };
  SvrBroadcastAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrBroadcastAddress_descriptor_,
      SvrBroadcastAddress::default_instance_,
      SvrBroadcastAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrBroadcastAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrBroadcastAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrBroadcastAddress));
  SvrMsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_push_5fproto_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrMsgHead_descriptor_, &SvrMsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrMsg_descriptor_, &SvrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrRegRequest_descriptor_, &SvrRegRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrRegResponse_descriptor_, &SvrRegResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrUpdateUser_descriptor_, &SvrUpdateUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrUserMsgAck_descriptor_, &SvrUserMsgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrUserReadMsg_descriptor_, &SvrUserReadMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrTransferMsg_descriptor_, &SvrTransferMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrHeartbeatMsg_descriptor_, &SvrHeartbeatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrInsertMsg_descriptor_, &SvrInsertMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrAddress_descriptor_, &SvrAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrConfigReq_descriptor_, &SvrConfigReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrConfig_descriptor_, &SvrConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrConfigResp_descriptor_, &SvrConfigResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrBroadcastAddress_descriptor_, &SvrBroadcastAddress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto() {
  delete SvrMsgHead::default_instance_;
  delete SvrMsgHead_reflection_;
  delete SvrMsg::default_instance_;
  delete SvrMsg_reflection_;
  delete SvrRegRequest::default_instance_;
  delete SvrRegRequest_reflection_;
  delete SvrRegResponse::default_instance_;
  delete SvrRegResponse_reflection_;
  delete SvrUpdateUser::default_instance_;
  delete SvrUpdateUser_reflection_;
  delete SvrUserMsgAck::default_instance_;
  delete SvrUserMsgAck_reflection_;
  delete SvrUserReadMsg::default_instance_;
  delete SvrUserReadMsg_reflection_;
  delete SvrTransferMsg::default_instance_;
  delete SvrTransferMsg_reflection_;
  delete SvrHeartbeatMsg::default_instance_;
  delete SvrHeartbeatMsg_reflection_;
  delete SvrInsertMsg::default_instance_;
  delete SvrInsertMsg_reflection_;
  delete SvrAddress::default_instance_;
  delete SvrAddress_reflection_;
  delete SvrConfigReq::default_instance_;
  delete SvrConfigReq_reflection_;
  delete SvrConfig::default_instance_;
  delete SvrConfig_reflection_;
  delete SvrConfigResp::default_instance_;
  delete SvrConfigResp_reflection_;
  delete SvrBroadcastAddress::default_instance_;
  delete SvrBroadcastAddress_reflection_;
}

void protobuf_AddDesc_push_5fproto_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_push_5fproto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027push_proto_server.proto\032\027push_proto_co"
    "mmon.proto\"\311\001\n\nSvrMsgHead\022\031\n\004type\030\001 \001(\0162"
    "\013.SvrMsgType\022\021\n\tclient_id\030\002 \001(\t\022\r\n\005appid"
    "\030\003 \001(\t\022\024\n\014src_svr_type\030\004 \001(\005\022\022\n\nsrc_svr_"
    "id\030\005 \001(\005\022\024\n\014dst_svr_type\030\006 \001(\005\022\022\n\ndst_sv"
    "r_id\030\007 \001(\005\022\024\n\014proxy_svr_id\030\010 \001(\005\022\024\n\014is_b"
    "roadcast\030\t \001(\010\"1\n\006SvrMsg\022\031\n\004head\030\001 \001(\0132\013"
    ".SvrMsgHead\022\014\n\004body\030\002 \001(\014\"1\n\rSvrRegReque"
    "st\022\016\n\006svr_id\030\001 \001(\005\022\020\n\010svr_type\030\002 \001(\005\"-\n\016"
    "SvrRegResponse\022\033\n\006result\030\001 \001(\0162\013.ResultC"
    "ode\"8\n\rSvrUpdateUser\022\024\n\014connector_id\030\001 \001"
    "(\005\022\021\n\tis_online\030\002 \001(\010\"\036\n\rSvrUserMsgAck\022\r"
    "\n\005msgid\030\001 \001(\003\"\037\n\016SvrUserReadMsg\022\r\n\005msgid"
    "\030\001 \001(\003\"0\n\016SvrTransferMsg\022\r\n\005msgid\030\001 \001(\003\022"
    "\017\n\007content\030\002 \001(\014\"\037\n\017SvrHeartbeatMsg\022\014\n\004t"
    "ime\030\001 \001(\003\"S\n\014SvrInsertMsg\022\r\n\005msgid\030\001 \001(\r"
    "\022\022\n\nclient_ids\030\002 \001(\t\022\013\n\003msg\030\003 \001(\014\022\023\n\013exp"
    "ire_time\030\004 \001(\005\"8\n\nSvrAddress\022\020\n\010svr_type"
    "\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\",\n\014SvrC"
    "onfigReq\022\034\n\007address\030\001 \001(\0132\013.SvrAddress\"\316"
    "\001\n\tSvrConfig\022\020\n\010log_type\030\001 \001(\005\022\017\n\007log_di"
    "r\030\002 \001(\t\022\021\n\tlog_level\030\003 \001(\005\022\022\n\nlog_config"
    "\030\004 \001(\014\022\023\n\013http_listen\030\013 \001(\005\022\020\n\010php_host\030"
    "\014 \001(\t\022\020\n\010php_port\030\r \001(\005\022\030\n\020client_outoft"
    "ime\030\025 \001(\005\022\020\n\010redis_ip\0303 \001(\t\022\022\n\nredis_por"
    "t\0304 \001(\005\"P\n\rSvrConfigResp\022\032\n\006config\030\001 \001(\013"
    "2\n.SvrConfig\022#\n\016peer_addresses\030\002 \003(\0132\013.S"
    "vrAddress\":\n\023SvrBroadcastAddress\022#\n\016peer"
    "_addresses\030\001 \003(\0132\013.SvrAddress*\233\002\n\nSvrMsg"
    "Type\022\017\n\013SMT_REG_REQ\020\001\022\020\n\014SMT_REG_RESP\020\002\022"
    "\023\n\017SMT_UPDATE_USER\020\003\022\024\n\020SMT_USER_MSG_ACK"
    "\020\004\022\025\n\021SMT_USER_READ_MSG\020\005\022\021\n\rSMT_KICK_US"
    "ER\020\007\022\024\n\020SMT_TRANSFER_MSG\020\010\022\020\n\014SMT_PUSH_M"
    "SG\020\t\022\022\n\016SMT_INSERT_MSG\020\n\022\022\n\016SMT_CONFIG_R"
    "EQ\020\r\022\023\n\017SMT_CONFIG_RESP\020\016\022\026\n\022SMT_BROADCA"
    "ST_ADDR\020\017\022\030\n\024SMT_BROADCAST_CONFIG\020\020", 1435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "push_proto_server.proto", &protobuf_RegisterTypes);
  SvrMsgHead::default_instance_ = new SvrMsgHead();
  SvrMsg::default_instance_ = new SvrMsg();
  SvrRegRequest::default_instance_ = new SvrRegRequest();
  SvrRegResponse::default_instance_ = new SvrRegResponse();
  SvrUpdateUser::default_instance_ = new SvrUpdateUser();
  SvrUserMsgAck::default_instance_ = new SvrUserMsgAck();
  SvrUserReadMsg::default_instance_ = new SvrUserReadMsg();
  SvrTransferMsg::default_instance_ = new SvrTransferMsg();
  SvrHeartbeatMsg::default_instance_ = new SvrHeartbeatMsg();
  SvrInsertMsg::default_instance_ = new SvrInsertMsg();
  SvrAddress::default_instance_ = new SvrAddress();
  SvrConfigReq::default_instance_ = new SvrConfigReq();
  SvrConfig::default_instance_ = new SvrConfig();
  SvrConfigResp::default_instance_ = new SvrConfigResp();
  SvrBroadcastAddress::default_instance_ = new SvrBroadcastAddress();
  SvrMsgHead::default_instance_->InitAsDefaultInstance();
  SvrMsg::default_instance_->InitAsDefaultInstance();
  SvrRegRequest::default_instance_->InitAsDefaultInstance();
  SvrRegResponse::default_instance_->InitAsDefaultInstance();
  SvrUpdateUser::default_instance_->InitAsDefaultInstance();
  SvrUserMsgAck::default_instance_->InitAsDefaultInstance();
  SvrUserReadMsg::default_instance_->InitAsDefaultInstance();
  SvrTransferMsg::default_instance_->InitAsDefaultInstance();
  SvrHeartbeatMsg::default_instance_->InitAsDefaultInstance();
  SvrInsertMsg::default_instance_->InitAsDefaultInstance();
  SvrAddress::default_instance_->InitAsDefaultInstance();
  SvrConfigReq::default_instance_->InitAsDefaultInstance();
  SvrConfig::default_instance_->InitAsDefaultInstance();
  SvrConfigResp::default_instance_->InitAsDefaultInstance();
  SvrBroadcastAddress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_push_5fproto_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_push_5fproto_5fserver_2eproto {
  StaticDescriptorInitializer_push_5fproto_5fserver_2eproto() {
    protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  }
} static_descriptor_initializer_push_5fproto_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* SvrMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrMsgType_descriptor_;
}
bool SvrMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SvrMsgHead::kTypeFieldNumber;
const int SvrMsgHead::kClientIdFieldNumber;
const int SvrMsgHead::kAppidFieldNumber;
const int SvrMsgHead::kSrcSvrTypeFieldNumber;
const int SvrMsgHead::kSrcSvrIdFieldNumber;
const int SvrMsgHead::kDstSvrTypeFieldNumber;
const int SvrMsgHead::kDstSvrIdFieldNumber;
const int SvrMsgHead::kProxySvrIdFieldNumber;
const int SvrMsgHead::kIsBroadcastFieldNumber;
#endif  // !_MSC_VER

SvrMsgHead::SvrMsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrMsgHead::InitAsDefaultInstance() {
}

SvrMsgHead::SvrMsgHead(const SvrMsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrMsgHead::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_svr_type_ = 0;
  src_svr_id_ = 0;
  dst_svr_type_ = 0;
  dst_svr_id_ = 0;
  proxy_svr_id_ = 0;
  is_broadcast_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrMsgHead::~SvrMsgHead() {
  SharedDtor();
}

void SvrMsgHead::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void SvrMsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrMsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrMsgHead_descriptor_;
}

const SvrMsgHead& SvrMsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrMsgHead* SvrMsgHead::default_instance_ = NULL;

SvrMsgHead* SvrMsgHead::New() const {
  return new SvrMsgHead;
}

void SvrMsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_client_id()) {
      if (client_id_ != &::google::protobuf::internal::kEmptyString) {
        client_id_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    src_svr_type_ = 0;
    src_svr_id_ = 0;
    dst_svr_type_ = 0;
    dst_svr_id_ = 0;
    proxy_svr_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_broadcast_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrMsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SvrMsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SvrMsgType_IsValid(value)) {
            set_type(static_cast< ::SvrMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_id;
        break;
      }

      // optional string client_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_src_svr_type;
        break;
      }

      // optional int32 src_svr_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_svr_type_)));
          set_has_src_svr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_src_svr_id;
        break;
      }

      // optional int32 src_svr_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_svr_id_)));
          set_has_src_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dst_svr_type;
        break;
      }

      // optional int32 dst_svr_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_svr_type_)));
          set_has_dst_svr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dst_svr_id;
        break;
      }

      // optional int32 dst_svr_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_svr_id_)));
          set_has_dst_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_proxy_svr_id;
        break;
      }

      // optional int32 proxy_svr_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_svr_id_)));
          set_has_proxy_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_broadcast;
        break;
      }

      // optional bool is_broadcast = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_broadcast_)));
          set_has_is_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrMsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SvrMsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client_id(), output);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appid(), output);
  }

  // optional int32 src_svr_type = 4;
  if (has_src_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->src_svr_type(), output);
  }

  // optional int32 src_svr_id = 5;
  if (has_src_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->src_svr_id(), output);
  }

  // optional int32 dst_svr_type = 6;
  if (has_dst_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dst_svr_type(), output);
  }

  // optional int32 dst_svr_id = 7;
  if (has_dst_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dst_svr_id(), output);
  }

  // optional int32 proxy_svr_id = 8;
  if (has_proxy_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->proxy_svr_id(), output);
  }

  // optional bool is_broadcast = 9;
  if (has_is_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_broadcast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrMsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SvrMsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // optional int32 src_svr_type = 4;
  if (has_src_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->src_svr_type(), target);
  }

  // optional int32 src_svr_id = 5;
  if (has_src_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->src_svr_id(), target);
  }

  // optional int32 dst_svr_type = 6;
  if (has_dst_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dst_svr_type(), target);
  }

  // optional int32 dst_svr_id = 7;
  if (has_dst_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dst_svr_id(), target);
  }

  // optional int32 proxy_svr_id = 8;
  if (has_proxy_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->proxy_svr_id(), target);
  }

  // optional bool is_broadcast = 9;
  if (has_is_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_broadcast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrMsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SvrMsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional string appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional int32 src_svr_type = 4;
    if (has_src_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_svr_type());
    }

    // optional int32 src_svr_id = 5;
    if (has_src_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_svr_id());
    }

    // optional int32 dst_svr_type = 6;
    if (has_dst_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_svr_type());
    }

    // optional int32 dst_svr_id = 7;
    if (has_dst_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_svr_id());
    }

    // optional int32 proxy_svr_id = 8;
    if (has_proxy_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxy_svr_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_broadcast = 9;
    if (has_is_broadcast()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrMsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrMsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrMsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrMsgHead::MergeFrom(const SvrMsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_src_svr_type()) {
      set_src_svr_type(from.src_svr_type());
    }
    if (from.has_src_svr_id()) {
      set_src_svr_id(from.src_svr_id());
    }
    if (from.has_dst_svr_type()) {
      set_dst_svr_type(from.dst_svr_type());
    }
    if (from.has_dst_svr_id()) {
      set_dst_svr_id(from.dst_svr_id());
    }
    if (from.has_proxy_svr_id()) {
      set_proxy_svr_id(from.proxy_svr_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_broadcast()) {
      set_is_broadcast(from.is_broadcast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrMsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrMsgHead::CopyFrom(const SvrMsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrMsgHead::IsInitialized() const {

  return true;
}

void SvrMsgHead::Swap(SvrMsgHead* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(client_id_, other->client_id_);
    std::swap(appid_, other->appid_);
    std::swap(src_svr_type_, other->src_svr_type_);
    std::swap(src_svr_id_, other->src_svr_id_);
    std::swap(dst_svr_type_, other->dst_svr_type_);
    std::swap(dst_svr_id_, other->dst_svr_id_);
    std::swap(proxy_svr_id_, other->proxy_svr_id_);
    std::swap(is_broadcast_, other->is_broadcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrMsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrMsgHead_descriptor_;
  metadata.reflection = SvrMsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrMsg::kHeadFieldNumber;
const int SvrMsg::kBodyFieldNumber;
#endif  // !_MSC_VER

SvrMsg::SvrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrMsg::InitAsDefaultInstance() {
  head_ = const_cast< ::SvrMsgHead*>(&::SvrMsgHead::default_instance());
}

SvrMsg::SvrMsg(const SvrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrMsg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrMsg::~SvrMsg() {
  SharedDtor();
}

void SvrMsg::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void SvrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrMsg_descriptor_;
}

const SvrMsg& SvrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrMsg* SvrMsg::default_instance_ = NULL;

SvrMsg* SvrMsg::New() const {
  return new SvrMsg;
}

void SvrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::SvrMsgHead::Clear();
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SvrMsgHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SvrMsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SvrMsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SvrMsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrMsg::MergeFrom(const SvrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::SvrMsgHead::MergeFrom(from.head());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrMsg::CopyFrom(const SvrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrMsg::IsInitialized() const {

  return true;
}

void SvrMsg::Swap(SvrMsg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrMsg_descriptor_;
  metadata.reflection = SvrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrRegRequest::kSvrIdFieldNumber;
const int SvrRegRequest::kSvrTypeFieldNumber;
#endif  // !_MSC_VER

SvrRegRequest::SvrRegRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrRegRequest::InitAsDefaultInstance() {
}

SvrRegRequest::SvrRegRequest(const SvrRegRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrRegRequest::SharedCtor() {
  _cached_size_ = 0;
  svr_id_ = 0;
  svr_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrRegRequest::~SvrRegRequest() {
  SharedDtor();
}

void SvrRegRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SvrRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrRegRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrRegRequest_descriptor_;
}

const SvrRegRequest& SvrRegRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrRegRequest* SvrRegRequest::default_instance_ = NULL;

SvrRegRequest* SvrRegRequest::New() const {
  return new SvrRegRequest;
}

void SvrRegRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_id_ = 0;
    svr_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 svr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svr_type;
        break;
      }

      // optional int32 svr_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 svr_id = 1;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->svr_id(), output);
  }

  // optional int32 svr_type = 2;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->svr_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrRegRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 svr_id = 1;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->svr_id(), target);
  }

  // optional int32 svr_type = 2;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->svr_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrRegRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 svr_id = 1;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svr_id());
    }

    // optional int32 svr_type = 2;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svr_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrRegRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrRegRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrRegRequest::MergeFrom(const SvrRegRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrRegRequest::CopyFrom(const SvrRegRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrRegRequest::IsInitialized() const {

  return true;
}

void SvrRegRequest::Swap(SvrRegRequest* other) {
  if (other != this) {
    std::swap(svr_id_, other->svr_id_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrRegRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrRegRequest_descriptor_;
  metadata.reflection = SvrRegRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrRegResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SvrRegResponse::SvrRegResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrRegResponse::InitAsDefaultInstance() {
}

SvrRegResponse::SvrRegResponse(const SvrRegResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrRegResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrRegResponse::~SvrRegResponse() {
  SharedDtor();
}

void SvrRegResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SvrRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrRegResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrRegResponse_descriptor_;
}

const SvrRegResponse& SvrRegResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrRegResponse* SvrRegResponse::default_instance_ = NULL;

SvrRegResponse* SvrRegResponse::New() const {
  return new SvrRegResponse;
}

void SvrRegResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResultCode result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ResultCode_IsValid(value)) {
            set_result(static_cast< ::ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ResultCode result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrRegResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ResultCode result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrRegResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ResultCode result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrRegResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrRegResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrRegResponse::MergeFrom(const SvrRegResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrRegResponse::CopyFrom(const SvrRegResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrRegResponse::IsInitialized() const {

  return true;
}

void SvrRegResponse::Swap(SvrRegResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrRegResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrRegResponse_descriptor_;
  metadata.reflection = SvrRegResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrUpdateUser::kConnectorIdFieldNumber;
const int SvrUpdateUser::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

SvrUpdateUser::SvrUpdateUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrUpdateUser::InitAsDefaultInstance() {
}

SvrUpdateUser::SvrUpdateUser(const SvrUpdateUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrUpdateUser::SharedCtor() {
  _cached_size_ = 0;
  connector_id_ = 0;
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrUpdateUser::~SvrUpdateUser() {
  SharedDtor();
}

void SvrUpdateUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SvrUpdateUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrUpdateUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrUpdateUser_descriptor_;
}

const SvrUpdateUser& SvrUpdateUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrUpdateUser* SvrUpdateUser::default_instance_ = NULL;

SvrUpdateUser* SvrUpdateUser::New() const {
  return new SvrUpdateUser;
}

void SvrUpdateUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connector_id_ = 0;
    is_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrUpdateUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connector_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connector_id_)));
          set_has_connector_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrUpdateUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 connector_id = 1;
  if (has_connector_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connector_id(), output);
  }

  // optional bool is_online = 2;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrUpdateUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 connector_id = 1;
  if (has_connector_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->connector_id(), target);
  }

  // optional bool is_online = 2;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrUpdateUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 connector_id = 1;
    if (has_connector_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connector_id());
    }

    // optional bool is_online = 2;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrUpdateUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrUpdateUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrUpdateUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrUpdateUser::MergeFrom(const SvrUpdateUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connector_id()) {
      set_connector_id(from.connector_id());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrUpdateUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrUpdateUser::CopyFrom(const SvrUpdateUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrUpdateUser::IsInitialized() const {

  return true;
}

void SvrUpdateUser::Swap(SvrUpdateUser* other) {
  if (other != this) {
    std::swap(connector_id_, other->connector_id_);
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrUpdateUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrUpdateUser_descriptor_;
  metadata.reflection = SvrUpdateUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrUserMsgAck::kMsgidFieldNumber;
#endif  // !_MSC_VER

SvrUserMsgAck::SvrUserMsgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrUserMsgAck::InitAsDefaultInstance() {
}

SvrUserMsgAck::SvrUserMsgAck(const SvrUserMsgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrUserMsgAck::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrUserMsgAck::~SvrUserMsgAck() {
  SharedDtor();
}

void SvrUserMsgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SvrUserMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrUserMsgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrUserMsgAck_descriptor_;
}

const SvrUserMsgAck& SvrUserMsgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrUserMsgAck* SvrUserMsgAck::default_instance_ = NULL;

SvrUserMsgAck* SvrUserMsgAck::New() const {
  return new SvrUserMsgAck;
}

void SvrUserMsgAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrUserMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrUserMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrUserMsgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrUserMsgAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrUserMsgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrUserMsgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrUserMsgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrUserMsgAck::MergeFrom(const SvrUserMsgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrUserMsgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrUserMsgAck::CopyFrom(const SvrUserMsgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrUserMsgAck::IsInitialized() const {

  return true;
}

void SvrUserMsgAck::Swap(SvrUserMsgAck* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrUserMsgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrUserMsgAck_descriptor_;
  metadata.reflection = SvrUserMsgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrUserReadMsg::kMsgidFieldNumber;
#endif  // !_MSC_VER

SvrUserReadMsg::SvrUserReadMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrUserReadMsg::InitAsDefaultInstance() {
}

SvrUserReadMsg::SvrUserReadMsg(const SvrUserReadMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrUserReadMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrUserReadMsg::~SvrUserReadMsg() {
  SharedDtor();
}

void SvrUserReadMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SvrUserReadMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrUserReadMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrUserReadMsg_descriptor_;
}

const SvrUserReadMsg& SvrUserReadMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrUserReadMsg* SvrUserReadMsg::default_instance_ = NULL;

SvrUserReadMsg* SvrUserReadMsg::New() const {
  return new SvrUserReadMsg;
}

void SvrUserReadMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrUserReadMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrUserReadMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrUserReadMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrUserReadMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrUserReadMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrUserReadMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrUserReadMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrUserReadMsg::MergeFrom(const SvrUserReadMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrUserReadMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrUserReadMsg::CopyFrom(const SvrUserReadMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrUserReadMsg::IsInitialized() const {

  return true;
}

void SvrUserReadMsg::Swap(SvrUserReadMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrUserReadMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrUserReadMsg_descriptor_;
  metadata.reflection = SvrUserReadMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrTransferMsg::kMsgidFieldNumber;
const int SvrTransferMsg::kContentFieldNumber;
#endif  // !_MSC_VER

SvrTransferMsg::SvrTransferMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrTransferMsg::InitAsDefaultInstance() {
}

SvrTransferMsg::SvrTransferMsg(const SvrTransferMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrTransferMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrTransferMsg::~SvrTransferMsg() {
  SharedDtor();
}

void SvrTransferMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SvrTransferMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrTransferMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrTransferMsg_descriptor_;
}

const SvrTransferMsg& SvrTransferMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrTransferMsg* SvrTransferMsg::default_instance_ = NULL;

SvrTransferMsg* SvrTransferMsg::New() const {
  return new SvrTransferMsg;
}

void SvrTransferMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrTransferMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrTransferMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrTransferMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrTransferMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrTransferMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrTransferMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrTransferMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrTransferMsg::MergeFrom(const SvrTransferMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrTransferMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrTransferMsg::CopyFrom(const SvrTransferMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrTransferMsg::IsInitialized() const {

  return true;
}

void SvrTransferMsg::Swap(SvrTransferMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrTransferMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrTransferMsg_descriptor_;
  metadata.reflection = SvrTransferMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrHeartbeatMsg::kTimeFieldNumber;
#endif  // !_MSC_VER

SvrHeartbeatMsg::SvrHeartbeatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrHeartbeatMsg::InitAsDefaultInstance() {
}

SvrHeartbeatMsg::SvrHeartbeatMsg(const SvrHeartbeatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrHeartbeatMsg::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrHeartbeatMsg::~SvrHeartbeatMsg() {
  SharedDtor();
}

void SvrHeartbeatMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SvrHeartbeatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrHeartbeatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrHeartbeatMsg_descriptor_;
}

const SvrHeartbeatMsg& SvrHeartbeatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrHeartbeatMsg* SvrHeartbeatMsg::default_instance_ = NULL;

SvrHeartbeatMsg* SvrHeartbeatMsg::New() const {
  return new SvrHeartbeatMsg;
}

void SvrHeartbeatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrHeartbeatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrHeartbeatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrHeartbeatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrHeartbeatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrHeartbeatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrHeartbeatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrHeartbeatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrHeartbeatMsg::MergeFrom(const SvrHeartbeatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrHeartbeatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrHeartbeatMsg::CopyFrom(const SvrHeartbeatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrHeartbeatMsg::IsInitialized() const {

  return true;
}

void SvrHeartbeatMsg::Swap(SvrHeartbeatMsg* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrHeartbeatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrHeartbeatMsg_descriptor_;
  metadata.reflection = SvrHeartbeatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrInsertMsg::kMsgidFieldNumber;
const int SvrInsertMsg::kClientIdsFieldNumber;
const int SvrInsertMsg::kMsgFieldNumber;
const int SvrInsertMsg::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

SvrInsertMsg::SvrInsertMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrInsertMsg::InitAsDefaultInstance() {
}

SvrInsertMsg::SvrInsertMsg(const SvrInsertMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrInsertMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  client_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expire_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrInsertMsg::~SvrInsertMsg() {
  SharedDtor();
}

void SvrInsertMsg::SharedDtor() {
  if (client_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ids_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void SvrInsertMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrInsertMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrInsertMsg_descriptor_;
}

const SvrInsertMsg& SvrInsertMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrInsertMsg* SvrInsertMsg::default_instance_ = NULL;

SvrInsertMsg* SvrInsertMsg::New() const {
  return new SvrInsertMsg;
}

void SvrInsertMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    if (has_client_ids()) {
      if (client_ids_ != &::google::protobuf::internal::kEmptyString) {
        client_ids_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    expire_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrInsertMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_ids;
        break;
      }

      // optional string client_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ids().data(), this->client_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }

      // optional int32 expire_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrInsertMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string client_ids = 2;
  if (has_client_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ids().data(), this->client_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client_ids(), output);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  // optional int32 expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expire_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrInsertMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional string client_ids = 2;
  if (has_client_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ids().data(), this->client_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_ids(), target);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // optional int32 expire_time = 4;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->expire_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrInsertMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string client_ids = 2;
    if (has_client_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ids());
    }

    // optional bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional int32 expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrInsertMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrInsertMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrInsertMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrInsertMsg::MergeFrom(const SvrInsertMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_client_ids()) {
      set_client_ids(from.client_ids());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrInsertMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrInsertMsg::CopyFrom(const SvrInsertMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrInsertMsg::IsInitialized() const {

  return true;
}

void SvrInsertMsg::Swap(SvrInsertMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(client_ids_, other->client_ids_);
    std::swap(msg_, other->msg_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrInsertMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrInsertMsg_descriptor_;
  metadata.reflection = SvrInsertMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrAddress::kSvrTypeFieldNumber;
const int SvrAddress::kIpFieldNumber;
const int SvrAddress::kPortFieldNumber;
#endif  // !_MSC_VER

SvrAddress::SvrAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrAddress::InitAsDefaultInstance() {
}

SvrAddress::SvrAddress(const SvrAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrAddress::SharedCtor() {
  _cached_size_ = 0;
  svr_type_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrAddress::~SvrAddress() {
  SharedDtor();
}

void SvrAddress::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void SvrAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrAddress_descriptor_;
}

const SvrAddress& SvrAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrAddress* SvrAddress::default_instance_ = NULL;

SvrAddress* SvrAddress::New() const {
  return new SvrAddress;
}

void SvrAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_type_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 svr_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 svr_type = 1;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->svr_type(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 svr_type = 1;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->svr_type(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 svr_type = 1;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svr_type());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrAddress::MergeFrom(const SvrAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrAddress::CopyFrom(const SvrAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrAddress::IsInitialized() const {

  return true;
}

void SvrAddress::Swap(SvrAddress* other) {
  if (other != this) {
    std::swap(svr_type_, other->svr_type_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrAddress_descriptor_;
  metadata.reflection = SvrAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrConfigReq::kAddressFieldNumber;
#endif  // !_MSC_VER

SvrConfigReq::SvrConfigReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrConfigReq::InitAsDefaultInstance() {
  address_ = const_cast< ::SvrAddress*>(&::SvrAddress::default_instance());
}

SvrConfigReq::SvrConfigReq(const SvrConfigReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrConfigReq::SharedCtor() {
  _cached_size_ = 0;
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrConfigReq::~SvrConfigReq() {
  SharedDtor();
}

void SvrConfigReq::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
  }
}

void SvrConfigReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrConfigReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrConfigReq_descriptor_;
}

const SvrConfigReq& SvrConfigReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrConfigReq* SvrConfigReq::default_instance_ = NULL;

SvrConfigReq* SvrConfigReq::New() const {
  return new SvrConfigReq;
}

void SvrConfigReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != NULL) address_->::SvrAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrConfigReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SvrAddress address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrConfigReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SvrAddress address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrConfigReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SvrAddress address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrConfigReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SvrAddress address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrConfigReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrConfigReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrConfigReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrConfigReq::MergeFrom(const SvrConfigReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      mutable_address()->::SvrAddress::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrConfigReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrConfigReq::CopyFrom(const SvrConfigReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrConfigReq::IsInitialized() const {

  return true;
}

void SvrConfigReq::Swap(SvrConfigReq* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrConfigReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrConfigReq_descriptor_;
  metadata.reflection = SvrConfigReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrConfig::kLogTypeFieldNumber;
const int SvrConfig::kLogDirFieldNumber;
const int SvrConfig::kLogLevelFieldNumber;
const int SvrConfig::kLogConfigFieldNumber;
const int SvrConfig::kHttpListenFieldNumber;
const int SvrConfig::kPhpHostFieldNumber;
const int SvrConfig::kPhpPortFieldNumber;
const int SvrConfig::kClientOutoftimeFieldNumber;
const int SvrConfig::kRedisIpFieldNumber;
const int SvrConfig::kRedisPortFieldNumber;
#endif  // !_MSC_VER

SvrConfig::SvrConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrConfig::InitAsDefaultInstance() {
}

SvrConfig::SvrConfig(const SvrConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrConfig::SharedCtor() {
  _cached_size_ = 0;
  log_type_ = 0;
  log_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_level_ = 0;
  log_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  http_listen_ = 0;
  php_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  php_port_ = 0;
  client_outoftime_ = 0;
  redis_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redis_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrConfig::~SvrConfig() {
  SharedDtor();
}

void SvrConfig::SharedDtor() {
  if (log_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete log_dir_;
  }
  if (log_config_ != &::google::protobuf::internal::kEmptyString) {
    delete log_config_;
  }
  if (php_host_ != &::google::protobuf::internal::kEmptyString) {
    delete php_host_;
  }
  if (redis_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete redis_ip_;
  }
  if (this != default_instance_) {
  }
}

void SvrConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrConfig_descriptor_;
}

const SvrConfig& SvrConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrConfig* SvrConfig::default_instance_ = NULL;

SvrConfig* SvrConfig::New() const {
  return new SvrConfig;
}

void SvrConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_type_ = 0;
    if (has_log_dir()) {
      if (log_dir_ != &::google::protobuf::internal::kEmptyString) {
        log_dir_->clear();
      }
    }
    log_level_ = 0;
    if (has_log_config()) {
      if (log_config_ != &::google::protobuf::internal::kEmptyString) {
        log_config_->clear();
      }
    }
    http_listen_ = 0;
    if (has_php_host()) {
      if (php_host_ != &::google::protobuf::internal::kEmptyString) {
        php_host_->clear();
      }
    }
    php_port_ = 0;
    client_outoftime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_redis_ip()) {
      if (redis_ip_ != &::google::protobuf::internal::kEmptyString) {
        redis_ip_->clear();
      }
    }
    redis_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 log_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_type_)));
          set_has_log_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log_dir;
        break;
      }

      // optional string log_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_dir().data(), this->log_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_log_level;
        break;
      }

      // optional int32 log_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_level_)));
          set_has_log_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_log_config;
        break;
      }

      // optional bytes log_config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_http_listen;
        break;
      }

      // optional int32 http_listen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_http_listen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_listen_)));
          set_has_http_listen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_php_host;
        break;
      }

      // optional string php_host = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_php_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_php_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->php_host().data(), this->php_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_php_port;
        break;
      }

      // optional int32 php_port = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_php_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &php_port_)));
          set_has_php_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_client_outoftime;
        break;
      }

      // optional int32 client_outoftime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_outoftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_outoftime_)));
          set_has_client_outoftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_redis_ip;
        break;
      }

      // optional string redis_ip = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redis_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redis_ip().data(), this->redis_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_redis_port;
        break;
      }

      // optional int32 redis_port = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redis_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redis_port_)));
          set_has_redis_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 log_type = 1;
  if (has_log_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->log_type(), output);
  }

  // optional string log_dir = 2;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->log_dir(), output);
  }

  // optional int32 log_level = 3;
  if (has_log_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->log_level(), output);
  }

  // optional bytes log_config = 4;
  if (has_log_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->log_config(), output);
  }

  // optional int32 http_listen = 11;
  if (has_http_listen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->http_listen(), output);
  }

  // optional string php_host = 12;
  if (has_php_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->php_host().data(), this->php_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->php_host(), output);
  }

  // optional int32 php_port = 13;
  if (has_php_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->php_port(), output);
  }

  // optional int32 client_outoftime = 21;
  if (has_client_outoftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->client_outoftime(), output);
  }

  // optional string redis_ip = 51;
  if (has_redis_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redis_ip().data(), this->redis_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->redis_ip(), output);
  }

  // optional int32 redis_port = 52;
  if (has_redis_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->redis_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 log_type = 1;
  if (has_log_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->log_type(), target);
  }

  // optional string log_dir = 2;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->log_dir(), target);
  }

  // optional int32 log_level = 3;
  if (has_log_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->log_level(), target);
  }

  // optional bytes log_config = 4;
  if (has_log_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->log_config(), target);
  }

  // optional int32 http_listen = 11;
  if (has_http_listen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->http_listen(), target);
  }

  // optional string php_host = 12;
  if (has_php_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->php_host().data(), this->php_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->php_host(), target);
  }

  // optional int32 php_port = 13;
  if (has_php_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->php_port(), target);
  }

  // optional int32 client_outoftime = 21;
  if (has_client_outoftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->client_outoftime(), target);
  }

  // optional string redis_ip = 51;
  if (has_redis_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redis_ip().data(), this->redis_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->redis_ip(), target);
  }

  // optional int32 redis_port = 52;
  if (has_redis_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->redis_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 log_type = 1;
    if (has_log_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_type());
    }

    // optional string log_dir = 2;
    if (has_log_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_dir());
    }

    // optional int32 log_level = 3;
    if (has_log_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_level());
    }

    // optional bytes log_config = 4;
    if (has_log_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log_config());
    }

    // optional int32 http_listen = 11;
    if (has_http_listen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_listen());
    }

    // optional string php_host = 12;
    if (has_php_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->php_host());
    }

    // optional int32 php_port = 13;
    if (has_php_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->php_port());
    }

    // optional int32 client_outoftime = 21;
    if (has_client_outoftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_outoftime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string redis_ip = 51;
    if (has_redis_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redis_ip());
    }

    // optional int32 redis_port = 52;
    if (has_redis_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redis_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrConfig::MergeFrom(const SvrConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_type()) {
      set_log_type(from.log_type());
    }
    if (from.has_log_dir()) {
      set_log_dir(from.log_dir());
    }
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
    if (from.has_log_config()) {
      set_log_config(from.log_config());
    }
    if (from.has_http_listen()) {
      set_http_listen(from.http_listen());
    }
    if (from.has_php_host()) {
      set_php_host(from.php_host());
    }
    if (from.has_php_port()) {
      set_php_port(from.php_port());
    }
    if (from.has_client_outoftime()) {
      set_client_outoftime(from.client_outoftime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_redis_ip()) {
      set_redis_ip(from.redis_ip());
    }
    if (from.has_redis_port()) {
      set_redis_port(from.redis_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrConfig::CopyFrom(const SvrConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrConfig::IsInitialized() const {

  return true;
}

void SvrConfig::Swap(SvrConfig* other) {
  if (other != this) {
    std::swap(log_type_, other->log_type_);
    std::swap(log_dir_, other->log_dir_);
    std::swap(log_level_, other->log_level_);
    std::swap(log_config_, other->log_config_);
    std::swap(http_listen_, other->http_listen_);
    std::swap(php_host_, other->php_host_);
    std::swap(php_port_, other->php_port_);
    std::swap(client_outoftime_, other->client_outoftime_);
    std::swap(redis_ip_, other->redis_ip_);
    std::swap(redis_port_, other->redis_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrConfig_descriptor_;
  metadata.reflection = SvrConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrConfigResp::kConfigFieldNumber;
const int SvrConfigResp::kPeerAddressesFieldNumber;
#endif  // !_MSC_VER

SvrConfigResp::SvrConfigResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrConfigResp::InitAsDefaultInstance() {
  config_ = const_cast< ::SvrConfig*>(&::SvrConfig::default_instance());
}

SvrConfigResp::SvrConfigResp(const SvrConfigResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrConfigResp::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrConfigResp::~SvrConfigResp() {
  SharedDtor();
}

void SvrConfigResp::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void SvrConfigResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrConfigResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrConfigResp_descriptor_;
}

const SvrConfigResp& SvrConfigResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrConfigResp* SvrConfigResp::default_instance_ = NULL;

SvrConfigResp* SvrConfigResp::New() const {
  return new SvrConfigResp;
}

void SvrConfigResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::SvrConfig::Clear();
    }
  }
  peer_addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrConfigResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SvrConfig config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_addresses;
        break;
      }

      // repeated .SvrAddress peer_addresses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peer_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_addresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrConfigResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SvrConfig config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(), output);
  }

  // repeated .SvrAddress peer_addresses = 2;
  for (int i = 0; i < this->peer_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peer_addresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrConfigResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SvrConfig config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config(), target);
  }

  // repeated .SvrAddress peer_addresses = 2;
  for (int i = 0; i < this->peer_addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peer_addresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrConfigResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SvrConfig config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  // repeated .SvrAddress peer_addresses = 2;
  total_size += 1 * this->peer_addresses_size();
  for (int i = 0; i < this->peer_addresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peer_addresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrConfigResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrConfigResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrConfigResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrConfigResp::MergeFrom(const SvrConfigResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_addresses_.MergeFrom(from.peer_addresses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::SvrConfig::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrConfigResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrConfigResp::CopyFrom(const SvrConfigResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrConfigResp::IsInitialized() const {

  return true;
}

void SvrConfigResp::Swap(SvrConfigResp* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    peer_addresses_.Swap(&other->peer_addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrConfigResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrConfigResp_descriptor_;
  metadata.reflection = SvrConfigResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrBroadcastAddress::kPeerAddressesFieldNumber;
#endif  // !_MSC_VER

SvrBroadcastAddress::SvrBroadcastAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrBroadcastAddress::InitAsDefaultInstance() {
}

SvrBroadcastAddress::SvrBroadcastAddress(const SvrBroadcastAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrBroadcastAddress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrBroadcastAddress::~SvrBroadcastAddress() {
  SharedDtor();
}

void SvrBroadcastAddress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SvrBroadcastAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrBroadcastAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrBroadcastAddress_descriptor_;
}

const SvrBroadcastAddress& SvrBroadcastAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  return *default_instance_;
}

SvrBroadcastAddress* SvrBroadcastAddress::default_instance_ = NULL;

SvrBroadcastAddress* SvrBroadcastAddress::New() const {
  return new SvrBroadcastAddress;
}

void SvrBroadcastAddress::Clear() {
  peer_addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrBroadcastAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SvrAddress peer_addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peer_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_peer_addresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrBroadcastAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SvrAddress peer_addresses = 1;
  for (int i = 0; i < this->peer_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peer_addresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrBroadcastAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SvrAddress peer_addresses = 1;
  for (int i = 0; i < this->peer_addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peer_addresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrBroadcastAddress::ByteSize() const {
  int total_size = 0;

  // repeated .SvrAddress peer_addresses = 1;
  total_size += 1 * this->peer_addresses_size();
  for (int i = 0; i < this->peer_addresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peer_addresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrBroadcastAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrBroadcastAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrBroadcastAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrBroadcastAddress::MergeFrom(const SvrBroadcastAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_addresses_.MergeFrom(from.peer_addresses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrBroadcastAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrBroadcastAddress::CopyFrom(const SvrBroadcastAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrBroadcastAddress::IsInitialized() const {

  return true;
}

void SvrBroadcastAddress::Swap(SvrBroadcastAddress* other) {
  if (other != this) {
    peer_addresses_.Swap(&other->peer_addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrBroadcastAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrBroadcastAddress_descriptor_;
  metadata.reflection = SvrBroadcastAddress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
