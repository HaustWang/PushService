// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_proto_client.proto

#ifndef PROTOBUF_push_5fproto_5fclient_2eproto__INCLUDED
#define PROTOBUF_push_5fproto_5fclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "push_proto_common.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

class ClientMsgHead;
class PushMessage;
class LoginRequest;
class LoginResponse;
class CipherContent;
class SvrPushMessage;
class ClientPushAck;
class ClientUpdateRead;
class HeartbeatMsg;

enum ClientMsgType {
  CMT_LOGIN_REQ = 1,
  CMT_LOGIN_RESP = 2,
  CMT_PUSH_MSG = 3,
  CMT_PUSH_ACK = 4,
  CMT_UPDATE_READ = 5,
  CMT_HEATBEAT = 100
};
bool ClientMsgType_IsValid(int value);
const ClientMsgType ClientMsgType_MIN = CMT_LOGIN_REQ;
const ClientMsgType ClientMsgType_MAX = CMT_HEATBEAT;
const int ClientMsgType_ARRAYSIZE = ClientMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMsgType_descriptor();
inline const ::std::string& ClientMsgType_Name(ClientMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMsgType_descriptor(), value);
}
inline bool ClientMsgType_Parse(
    const ::std::string& name, ClientMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMsgType>(
    ClientMsgType_descriptor(), name, value);
}
// ===================================================================

class ClientMsgHead : public ::google::protobuf::Message {
 public:
  ClientMsgHead();
  virtual ~ClientMsgHead();

  ClientMsgHead(const ClientMsgHead& from);

  inline ClientMsgHead& operator=(const ClientMsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMsgHead& default_instance();

  void Swap(ClientMsgHead* other);

  // implements Message ----------------------------------------------

  ClientMsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMsgHead& from);
  void MergeFrom(const ClientMsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // optional .ClientMsgType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::ClientMsgType type() const;
  inline void set_type(::ClientMsgType value);

  // @@protoc_insertion_point(class_scope:ClientMsgHead)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ClientMsgHead* default_instance_;
};
// -------------------------------------------------------------------

class PushMessage : public ::google::protobuf::Message {
 public:
  PushMessage();
  virtual ~PushMessage();

  PushMessage(const PushMessage& from);

  inline PushMessage& operator=(const PushMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushMessage& default_instance();

  void Swap(PushMessage* other);

  // implements Message ----------------------------------------------

  PushMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushMessage& from);
  void MergeFrom(const PushMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ClientMsgHead message_head = 1;
  inline bool has_message_head() const;
  inline void clear_message_head();
  static const int kMessageHeadFieldNumber = 1;
  inline const ::ClientMsgHead& message_head() const;
  inline ::ClientMsgHead* mutable_message_head();
  inline ::ClientMsgHead* release_message_head();
  inline void set_allocated_message_head(::ClientMsgHead* message_head);

  // optional bytes message_body = 2;
  inline bool has_message_body() const;
  inline void clear_message_body();
  static const int kMessageBodyFieldNumber = 2;
  inline const ::std::string& message_body() const;
  inline void set_message_body(const ::std::string& value);
  inline void set_message_body(const char* value);
  inline void set_message_body(const void* value, size_t size);
  inline ::std::string* mutable_message_body();
  inline ::std::string* release_message_body();
  inline void set_allocated_message_body(::std::string* message_body);

  // @@protoc_insertion_point(class_scope:PushMessage)
 private:
  inline void set_has_message_head();
  inline void clear_has_message_head();
  inline void set_has_message_body();
  inline void clear_has_message_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ClientMsgHead* message_head_;
  ::std::string* message_body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static PushMessage* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string imsi = 1;
  inline bool has_imsi() const;
  inline void clear_imsi();
  static const int kImsiFieldNumber = 1;
  inline const ::std::string& imsi() const;
  inline void set_imsi(const ::std::string& value);
  inline void set_imsi(const char* value);
  inline void set_imsi(const char* value, size_t size);
  inline ::std::string* mutable_imsi();
  inline ::std::string* release_imsi();
  inline void set_allocated_imsi(::std::string* imsi);

  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:
  inline void set_has_imsi();
  inline void clear_has_imsi();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* imsi_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResultCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ResultCode result() const;
  inline void set_result(::ResultCode value);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes cipher = 3;
  inline bool has_cipher() const;
  inline void clear_cipher();
  static const int kCipherFieldNumber = 3;
  inline const ::std::string& cipher() const;
  inline void set_cipher(const ::std::string& value);
  inline void set_cipher(const char* value);
  inline void set_cipher(const void* value, size_t size);
  inline ::std::string* mutable_cipher();
  inline ::std::string* release_cipher();
  inline void set_allocated_cipher(::std::string* cipher);

  // @@protoc_insertion_point(class_scope:LoginResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_cipher();
  inline void clear_has_cipher();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* cipher_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class CipherContent : public ::google::protobuf::Message {
 public:
  CipherContent();
  virtual ~CipherContent();

  CipherContent(const CipherContent& from);

  inline CipherContent& operator=(const CipherContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CipherContent& default_instance();

  void Swap(CipherContent* other);

  // implements Message ----------------------------------------------

  CipherContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CipherContent& from);
  void MergeFrom(const CipherContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string true_key = 1;
  inline bool has_true_key() const;
  inline void clear_true_key();
  static const int kTrueKeyFieldNumber = 1;
  inline const ::std::string& true_key() const;
  inline void set_true_key(const ::std::string& value);
  inline void set_true_key(const char* value);
  inline void set_true_key(const char* value, size_t size);
  inline ::std::string* mutable_true_key();
  inline ::std::string* release_true_key();
  inline void set_allocated_true_key(::std::string* true_key);

  // optional string client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // @@protoc_insertion_point(class_scope:CipherContent)
 private:
  inline void set_has_true_key();
  inline void clear_has_true_key();
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* true_key_;
  ::std::string* client_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static CipherContent* default_instance_;
};
// -------------------------------------------------------------------

class SvrPushMessage : public ::google::protobuf::Message {
 public:
  SvrPushMessage();
  virtual ~SvrPushMessage();

  SvrPushMessage(const SvrPushMessage& from);

  inline SvrPushMessage& operator=(const SvrPushMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrPushMessage& default_instance();

  void Swap(SvrPushMessage* other);

  // implements Message ----------------------------------------------

  SvrPushMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrPushMessage& from);
  void MergeFrom(const SvrPushMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // optional string appname = 2;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 2;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // optional int64 msgid = 3;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // optional bytes msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:SvrPushMessage)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appid_;
  ::std::string* appname_;
  ::google::protobuf::int64 msgid_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static SvrPushMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientPushAck : public ::google::protobuf::Message {
 public:
  ClientPushAck();
  virtual ~ClientPushAck();

  ClientPushAck(const ClientPushAck& from);

  inline ClientPushAck& operator=(const ClientPushAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientPushAck& default_instance();

  void Swap(ClientPushAck* other);

  // implements Message ----------------------------------------------

  ClientPushAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientPushAck& from);
  void MergeFrom(const ClientPushAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResultCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ResultCode result() const;
  inline void set_result(::ResultCode value);

  // optional int64 msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ClientPushAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 msgid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ClientPushAck* default_instance_;
};
// -------------------------------------------------------------------

class ClientUpdateRead : public ::google::protobuf::Message {
 public:
  ClientUpdateRead();
  virtual ~ClientUpdateRead();

  ClientUpdateRead(const ClientUpdateRead& from);

  inline ClientUpdateRead& operator=(const ClientUpdateRead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientUpdateRead& default_instance();

  void Swap(ClientUpdateRead* other);

  // implements Message ----------------------------------------------

  ClientUpdateRead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientUpdateRead& from);
  void MergeFrom(const ClientUpdateRead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ClientUpdateRead)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ClientUpdateRead* default_instance_;
};
// -------------------------------------------------------------------

class HeartbeatMsg : public ::google::protobuf::Message {
 public:
  HeartbeatMsg();
  virtual ~HeartbeatMsg();

  HeartbeatMsg(const HeartbeatMsg& from);

  inline HeartbeatMsg& operator=(const HeartbeatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatMsg& default_instance();

  void Swap(HeartbeatMsg* other);

  // implements Message ----------------------------------------------

  HeartbeatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatMsg& from);
  void MergeFrom(const HeartbeatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HeartbeatMsg)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fclient_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fclient_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientMsgHead

// optional string client_id = 1;
inline bool ClientMsgHead::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMsgHead::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMsgHead::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMsgHead::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& ClientMsgHead::client_id() const {
  return *client_id_;
}
inline void ClientMsgHead::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void ClientMsgHead::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void ClientMsgHead::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMsgHead::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* ClientMsgHead::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientMsgHead::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ClientMsgType type = 2;
inline bool ClientMsgHead::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMsgHead::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientMsgHead::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientMsgHead::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ClientMsgType ClientMsgHead::type() const {
  return static_cast< ::ClientMsgType >(type_);
}
inline void ClientMsgHead::set_type(::ClientMsgType value) {
  assert(::ClientMsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// PushMessage

// optional .ClientMsgHead message_head = 1;
inline bool PushMessage::has_message_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushMessage::set_has_message_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushMessage::clear_has_message_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushMessage::clear_message_head() {
  if (message_head_ != NULL) message_head_->::ClientMsgHead::Clear();
  clear_has_message_head();
}
inline const ::ClientMsgHead& PushMessage::message_head() const {
  return message_head_ != NULL ? *message_head_ : *default_instance_->message_head_;
}
inline ::ClientMsgHead* PushMessage::mutable_message_head() {
  set_has_message_head();
  if (message_head_ == NULL) message_head_ = new ::ClientMsgHead;
  return message_head_;
}
inline ::ClientMsgHead* PushMessage::release_message_head() {
  clear_has_message_head();
  ::ClientMsgHead* temp = message_head_;
  message_head_ = NULL;
  return temp;
}
inline void PushMessage::set_allocated_message_head(::ClientMsgHead* message_head) {
  delete message_head_;
  message_head_ = message_head;
  if (message_head) {
    set_has_message_head();
  } else {
    clear_has_message_head();
  }
}

// optional bytes message_body = 2;
inline bool PushMessage::has_message_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushMessage::set_has_message_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushMessage::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushMessage::clear_message_body() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    message_body_->clear();
  }
  clear_has_message_body();
}
inline const ::std::string& PushMessage::message_body() const {
  return *message_body_;
}
inline void PushMessage::set_message_body(const ::std::string& value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void PushMessage::set_message_body(const char* value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void PushMessage::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushMessage::mutable_message_body() {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  return message_body_;
}
inline ::std::string* PushMessage::release_message_body() {
  clear_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_body_;
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushMessage::set_allocated_message_body(::std::string* message_body) {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (message_body) {
    set_has_message_body();
    message_body_ = message_body;
  } else {
    clear_has_message_body();
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRequest

// optional string imsi = 1;
inline bool LoginRequest::has_imsi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_imsi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_imsi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_imsi() {
  if (imsi_ != &::google::protobuf::internal::kEmptyString) {
    imsi_->clear();
  }
  clear_has_imsi();
}
inline const ::std::string& LoginRequest::imsi() const {
  return *imsi_;
}
inline void LoginRequest::set_imsi(const ::std::string& value) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::kEmptyString) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
}
inline void LoginRequest::set_imsi(const char* value) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::kEmptyString) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
}
inline void LoginRequest::set_imsi(const char* value, size_t size) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::kEmptyString) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_imsi() {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::kEmptyString) {
    imsi_ = new ::std::string;
  }
  return imsi_;
}
inline ::std::string* LoginRequest::release_imsi() {
  clear_has_imsi();
  if (imsi_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imsi_;
    imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_imsi(::std::string* imsi) {
  if (imsi_ != &::google::protobuf::internal::kEmptyString) {
    delete imsi_;
  }
  if (imsi) {
    set_has_imsi();
    imsi_ = imsi;
  } else {
    clear_has_imsi();
    imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time = 2;
inline bool LoginRequest::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 LoginRequest::time() const {
  return time_;
}
inline void LoginRequest::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// LoginResponse

// optional .ResultCode result = 1;
inline bool LoginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ResultCode LoginResponse::result() const {
  return static_cast< ::ResultCode >(result_);
}
inline void LoginResponse::set_result(::ResultCode value) {
  assert(::ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string key = 2;
inline bool LoginResponse::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LoginResponse::key() const {
  return *key_;
}
inline void LoginResponse::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LoginResponse::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LoginResponse::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResponse::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* LoginResponse::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResponse::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes cipher = 3;
inline bool LoginResponse::has_cipher() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_cipher() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_cipher() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_cipher() {
  if (cipher_ != &::google::protobuf::internal::kEmptyString) {
    cipher_->clear();
  }
  clear_has_cipher();
}
inline const ::std::string& LoginResponse::cipher() const {
  return *cipher_;
}
inline void LoginResponse::set_cipher(const ::std::string& value) {
  set_has_cipher();
  if (cipher_ == &::google::protobuf::internal::kEmptyString) {
    cipher_ = new ::std::string;
  }
  cipher_->assign(value);
}
inline void LoginResponse::set_cipher(const char* value) {
  set_has_cipher();
  if (cipher_ == &::google::protobuf::internal::kEmptyString) {
    cipher_ = new ::std::string;
  }
  cipher_->assign(value);
}
inline void LoginResponse::set_cipher(const void* value, size_t size) {
  set_has_cipher();
  if (cipher_ == &::google::protobuf::internal::kEmptyString) {
    cipher_ = new ::std::string;
  }
  cipher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResponse::mutable_cipher() {
  set_has_cipher();
  if (cipher_ == &::google::protobuf::internal::kEmptyString) {
    cipher_ = new ::std::string;
  }
  return cipher_;
}
inline ::std::string* LoginResponse::release_cipher() {
  clear_has_cipher();
  if (cipher_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cipher_;
    cipher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResponse::set_allocated_cipher(::std::string* cipher) {
  if (cipher_ != &::google::protobuf::internal::kEmptyString) {
    delete cipher_;
  }
  if (cipher) {
    set_has_cipher();
    cipher_ = cipher;
  } else {
    clear_has_cipher();
    cipher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CipherContent

// optional string true_key = 1;
inline bool CipherContent::has_true_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CipherContent::set_has_true_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CipherContent::clear_has_true_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CipherContent::clear_true_key() {
  if (true_key_ != &::google::protobuf::internal::kEmptyString) {
    true_key_->clear();
  }
  clear_has_true_key();
}
inline const ::std::string& CipherContent::true_key() const {
  return *true_key_;
}
inline void CipherContent::set_true_key(const ::std::string& value) {
  set_has_true_key();
  if (true_key_ == &::google::protobuf::internal::kEmptyString) {
    true_key_ = new ::std::string;
  }
  true_key_->assign(value);
}
inline void CipherContent::set_true_key(const char* value) {
  set_has_true_key();
  if (true_key_ == &::google::protobuf::internal::kEmptyString) {
    true_key_ = new ::std::string;
  }
  true_key_->assign(value);
}
inline void CipherContent::set_true_key(const char* value, size_t size) {
  set_has_true_key();
  if (true_key_ == &::google::protobuf::internal::kEmptyString) {
    true_key_ = new ::std::string;
  }
  true_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CipherContent::mutable_true_key() {
  set_has_true_key();
  if (true_key_ == &::google::protobuf::internal::kEmptyString) {
    true_key_ = new ::std::string;
  }
  return true_key_;
}
inline ::std::string* CipherContent::release_true_key() {
  clear_has_true_key();
  if (true_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = true_key_;
    true_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CipherContent::set_allocated_true_key(::std::string* true_key) {
  if (true_key_ != &::google::protobuf::internal::kEmptyString) {
    delete true_key_;
  }
  if (true_key) {
    set_has_true_key();
    true_key_ = true_key;
  } else {
    clear_has_true_key();
    true_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string client_id = 2;
inline bool CipherContent::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CipherContent::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CipherContent::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CipherContent::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& CipherContent::client_id() const {
  return *client_id_;
}
inline void CipherContent::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void CipherContent::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void CipherContent::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CipherContent::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* CipherContent::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CipherContent::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SvrPushMessage

// optional string appid = 1;
inline bool SvrPushMessage::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrPushMessage::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrPushMessage::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrPushMessage::clear_appid() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& SvrPushMessage::appid() const {
  return *appid_;
}
inline void SvrPushMessage::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void SvrPushMessage::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void SvrPushMessage::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrPushMessage::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  return appid_;
}
inline ::std::string* SvrPushMessage::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrPushMessage::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appname = 2;
inline bool SvrPushMessage::has_appname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrPushMessage::set_has_appname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrPushMessage::clear_has_appname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrPushMessage::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& SvrPushMessage::appname() const {
  return *appname_;
}
inline void SvrPushMessage::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void SvrPushMessage::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void SvrPushMessage::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrPushMessage::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* SvrPushMessage::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrPushMessage::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 msgid = 3;
inline bool SvrPushMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrPushMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrPushMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrPushMessage::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 SvrPushMessage::msgid() const {
  return msgid_;
}
inline void SvrPushMessage::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional bytes msg = 4;
inline bool SvrPushMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SvrPushMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SvrPushMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SvrPushMessage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& SvrPushMessage::msg() const {
  return *msg_;
}
inline void SvrPushMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SvrPushMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SvrPushMessage::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrPushMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* SvrPushMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrPushMessage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientPushAck

// optional .ResultCode result = 1;
inline bool ClientPushAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientPushAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientPushAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientPushAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ResultCode ClientPushAck::result() const {
  return static_cast< ::ResultCode >(result_);
}
inline void ClientPushAck::set_result(::ResultCode value) {
  assert(::ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int64 msgid = 2;
inline bool ClientPushAck::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientPushAck::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientPushAck::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientPushAck::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 ClientPushAck::msgid() const {
  return msgid_;
}
inline void ClientPushAck::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// ClientUpdateRead

// optional int64 msgid = 1;
inline bool ClientUpdateRead::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientUpdateRead::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientUpdateRead::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientUpdateRead::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 ClientUpdateRead::msgid() const {
  return msgid_;
}
inline void ClientUpdateRead::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// HeartbeatMsg

// optional int32 time = 1;
inline bool HeartbeatMsg::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatMsg::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatMsg::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatMsg::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 HeartbeatMsg::time() const {
  return time_;
}
inline void HeartbeatMsg::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientMsgType>() {
  return ::ClientMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_push_5fproto_5fclient_2eproto__INCLUDED
