// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_proto_server.proto

#ifndef PROTOBUF_push_5fproto_5fserver_2eproto__INCLUDED
#define PROTOBUF_push_5fproto_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "push_proto_common.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

class SvrMsgHead;
class SvrMsg;
class SvrRegRequest;
class SvrRegResponse;
class SvrUpdateUser;
class SvrKickUser;
class SvrUserMsgAck;
class SvrUserReadMsg;
class SvrTransferMsg;
class SvrHeartbeatMsg;
class SvrInsertMsg;
class SvrAddress;
class SvrConfigReq;
class SvrConfig;
class SvrConfigResp;
class SvrBroadcastAddress;
class SvrSyncAddress;

enum ServerType {
  SERVER_TYPE_CENTER = 0,
  SERVER_TYPE_PROXY = 1,
  SERVER_TYPE_CONNECTOR = 2,
  SERVER_TYPE_PHP_PROXY = 3,
  SERVER_TYPE_DB_WORKER = 4,
  SERVER_TYPE_LOADER = 5,
  SERVER_TYPE_THIRD_PROXY = 6
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = SERVER_TYPE_CENTER;
const ServerType ServerType_MAX = SERVER_TYPE_THIRD_PROXY;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
enum SvrMsgType {
  SMT_REG_REQ = 1,
  SMT_REG_RESP = 2,
  SMT_UPDATE_USER = 3,
  SMT_USER_MSG_ACK = 4,
  SMT_USER_READ_MSG = 5,
  SMT_KICK_USER = 7,
  SMT_TRANSFER_MSG = 8,
  SMT_PUSH_MSG = 9,
  SMT_INSERT_MSG = 10,
  SMT_CONFIG_REQ = 13,
  SMT_CONFIG_RESP = 14,
  SMT_BROADCAST_ADDR = 15,
  SMT_BROADCAST_CONFIG = 16,
  SMT_SYNC_ADDRESS = 17
};
bool SvrMsgType_IsValid(int value);
const SvrMsgType SvrMsgType_MIN = SMT_REG_REQ;
const SvrMsgType SvrMsgType_MAX = SMT_SYNC_ADDRESS;
const int SvrMsgType_ARRAYSIZE = SvrMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SvrMsgType_descriptor();
inline const ::std::string& SvrMsgType_Name(SvrMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SvrMsgType_descriptor(), value);
}
inline bool SvrMsgType_Parse(
    const ::std::string& name, SvrMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SvrMsgType>(
    SvrMsgType_descriptor(), name, value);
}
// ===================================================================

class SvrMsgHead : public ::google::protobuf::Message {
 public:
  SvrMsgHead();
  virtual ~SvrMsgHead();

  SvrMsgHead(const SvrMsgHead& from);

  inline SvrMsgHead& operator=(const SvrMsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrMsgHead& default_instance();

  void Swap(SvrMsgHead* other);

  // implements Message ----------------------------------------------

  SvrMsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrMsgHead& from);
  void MergeFrom(const SvrMsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SvrMsgType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SvrMsgType type() const;
  inline void set_type(::SvrMsgType value);

  // optional int32 src_svr_type = 4;
  inline bool has_src_svr_type() const;
  inline void clear_src_svr_type();
  static const int kSrcSvrTypeFieldNumber = 4;
  inline ::google::protobuf::int32 src_svr_type() const;
  inline void set_src_svr_type(::google::protobuf::int32 value);

  // optional int32 src_svr_id = 5;
  inline bool has_src_svr_id() const;
  inline void clear_src_svr_id();
  static const int kSrcSvrIdFieldNumber = 5;
  inline ::google::protobuf::int32 src_svr_id() const;
  inline void set_src_svr_id(::google::protobuf::int32 value);

  // optional int32 dst_svr_type = 6;
  inline bool has_dst_svr_type() const;
  inline void clear_dst_svr_type();
  static const int kDstSvrTypeFieldNumber = 6;
  inline ::google::protobuf::int32 dst_svr_type() const;
  inline void set_dst_svr_type(::google::protobuf::int32 value);

  // optional int32 dst_svr_id = 7;
  inline bool has_dst_svr_id() const;
  inline void clear_dst_svr_id();
  static const int kDstSvrIdFieldNumber = 7;
  inline ::google::protobuf::int32 dst_svr_id() const;
  inline void set_dst_svr_id(::google::protobuf::int32 value);

  // optional int32 proxy_svr_id = 8;
  inline bool has_proxy_svr_id() const;
  inline void clear_proxy_svr_id();
  static const int kProxySvrIdFieldNumber = 8;
  inline ::google::protobuf::int32 proxy_svr_id() const;
  inline void set_proxy_svr_id(::google::protobuf::int32 value);

  // optional bool is_broadcast = 9;
  inline bool has_is_broadcast() const;
  inline void clear_is_broadcast();
  static const int kIsBroadcastFieldNumber = 9;
  inline bool is_broadcast() const;
  inline void set_is_broadcast(bool value);

  // @@protoc_insertion_point(class_scope:SvrMsgHead)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_src_svr_type();
  inline void clear_has_src_svr_type();
  inline void set_has_src_svr_id();
  inline void clear_has_src_svr_id();
  inline void set_has_dst_svr_type();
  inline void clear_has_dst_svr_type();
  inline void set_has_dst_svr_id();
  inline void clear_has_dst_svr_id();
  inline void set_has_proxy_svr_id();
  inline void clear_has_proxy_svr_id();
  inline void set_has_is_broadcast();
  inline void clear_has_is_broadcast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 src_svr_type_;
  ::google::protobuf::int32 src_svr_id_;
  ::google::protobuf::int32 dst_svr_type_;
  ::google::protobuf::int32 dst_svr_id_;
  ::google::protobuf::int32 proxy_svr_id_;
  bool is_broadcast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrMsgHead* default_instance_;
};
// -------------------------------------------------------------------

class SvrMsg : public ::google::protobuf::Message {
 public:
  SvrMsg();
  virtual ~SvrMsg();

  SvrMsg(const SvrMsg& from);

  inline SvrMsg& operator=(const SvrMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrMsg& default_instance();

  void Swap(SvrMsg* other);

  // implements Message ----------------------------------------------

  SvrMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrMsg& from);
  void MergeFrom(const SvrMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SvrMsgHead head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::SvrMsgHead& head() const;
  inline ::SvrMsgHead* mutable_head();
  inline ::SvrMsgHead* release_head();
  inline void set_allocated_head(::SvrMsgHead* head);

  // optional bytes body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:SvrMsg)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SvrMsgHead* head_;
  ::std::string* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrMsg* default_instance_;
};
// -------------------------------------------------------------------

class SvrRegRequest : public ::google::protobuf::Message {
 public:
  SvrRegRequest();
  virtual ~SvrRegRequest();

  SvrRegRequest(const SvrRegRequest& from);

  inline SvrRegRequest& operator=(const SvrRegRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrRegRequest& default_instance();

  void Swap(SvrRegRequest* other);

  // implements Message ----------------------------------------------

  SvrRegRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrRegRequest& from);
  void MergeFrom(const SvrRegRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 svr_id = 1;
  inline bool has_svr_id() const;
  inline void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  inline ::google::protobuf::int32 svr_id() const;
  inline void set_svr_id(::google::protobuf::int32 value);

  // optional int32 svr_type = 2;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 2;
  inline ::google::protobuf::int32 svr_type() const;
  inline void set_svr_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrRegRequest)
 private:
  inline void set_has_svr_id();
  inline void clear_has_svr_id();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 svr_id_;
  ::google::protobuf::int32 svr_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrRegRequest* default_instance_;
};
// -------------------------------------------------------------------

class SvrRegResponse : public ::google::protobuf::Message {
 public:
  SvrRegResponse();
  virtual ~SvrRegResponse();

  SvrRegResponse(const SvrRegResponse& from);

  inline SvrRegResponse& operator=(const SvrRegResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrRegResponse& default_instance();

  void Swap(SvrRegResponse* other);

  // implements Message ----------------------------------------------

  SvrRegResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrRegResponse& from);
  void MergeFrom(const SvrRegResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResultCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ResultCode result() const;
  inline void set_result(::ResultCode value);

  // @@protoc_insertion_point(class_scope:SvrRegResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrRegResponse* default_instance_;
};
// -------------------------------------------------------------------

class SvrUpdateUser : public ::google::protobuf::Message {
 public:
  SvrUpdateUser();
  virtual ~SvrUpdateUser();

  SvrUpdateUser(const SvrUpdateUser& from);

  inline SvrUpdateUser& operator=(const SvrUpdateUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrUpdateUser& default_instance();

  void Swap(SvrUpdateUser* other);

  // implements Message ----------------------------------------------

  SvrUpdateUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrUpdateUser& from);
  void MergeFrom(const SvrUpdateUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 connector_id = 1;
  inline bool has_connector_id() const;
  inline void clear_connector_id();
  static const int kConnectorIdFieldNumber = 1;
  inline ::google::protobuf::int32 connector_id() const;
  inline void set_connector_id(::google::protobuf::int32 value);

  // optional string client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // optional bool is_online = 3;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 3;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:SvrUpdateUser)
 private:
  inline void set_has_connector_id();
  inline void clear_has_connector_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;
  ::google::protobuf::int32 connector_id_;
  bool is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrUpdateUser* default_instance_;
};
// -------------------------------------------------------------------

class SvrKickUser : public ::google::protobuf::Message {
 public:
  SvrKickUser();
  virtual ~SvrKickUser();

  SvrKickUser(const SvrKickUser& from);

  inline SvrKickUser& operator=(const SvrKickUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrKickUser& default_instance();

  void Swap(SvrKickUser* other);

  // implements Message ----------------------------------------------

  SvrKickUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrKickUser& from);
  void MergeFrom(const SvrKickUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // @@protoc_insertion_point(class_scope:SvrKickUser)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrKickUser* default_instance_;
};
// -------------------------------------------------------------------

class SvrUserMsgAck : public ::google::protobuf::Message {
 public:
  SvrUserMsgAck();
  virtual ~SvrUserMsgAck();

  SvrUserMsgAck(const SvrUserMsgAck& from);

  inline SvrUserMsgAck& operator=(const SvrUserMsgAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrUserMsgAck& default_instance();

  void Swap(SvrUserMsgAck* other);

  // implements Message ----------------------------------------------

  SvrUserMsgAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrUserMsgAck& from);
  void MergeFrom(const SvrUserMsgAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // optional string client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // optional .ResultCode code = 3;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline ::ResultCode code() const;
  inline void set_code(::ResultCode value);

  // @@protoc_insertion_point(class_scope:SvrUserMsgAck)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 msgid_;
  ::std::string* client_id_;
  int code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrUserMsgAck* default_instance_;
};
// -------------------------------------------------------------------

class SvrUserReadMsg : public ::google::protobuf::Message {
 public:
  SvrUserReadMsg();
  virtual ~SvrUserReadMsg();

  SvrUserReadMsg(const SvrUserReadMsg& from);

  inline SvrUserReadMsg& operator=(const SvrUserReadMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrUserReadMsg& default_instance();

  void Swap(SvrUserReadMsg* other);

  // implements Message ----------------------------------------------

  SvrUserReadMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrUserReadMsg& from);
  void MergeFrom(const SvrUserReadMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // optional string client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // @@protoc_insertion_point(class_scope:SvrUserReadMsg)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 msgid_;
  ::std::string* client_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrUserReadMsg* default_instance_;
};
// -------------------------------------------------------------------

class SvrTransferMsg : public ::google::protobuf::Message {
 public:
  SvrTransferMsg();
  virtual ~SvrTransferMsg();

  SvrTransferMsg(const SvrTransferMsg& from);

  inline SvrTransferMsg& operator=(const SvrTransferMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrTransferMsg& default_instance();

  void Swap(SvrTransferMsg* other);

  // implements Message ----------------------------------------------

  SvrTransferMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrTransferMsg& from);
  void MergeFrom(const SvrTransferMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // optional bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated string client_ids = 3;
  inline int client_ids_size() const;
  inline void clear_client_ids();
  static const int kClientIdsFieldNumber = 3;
  inline const ::std::string& client_ids(int index) const;
  inline ::std::string* mutable_client_ids(int index);
  inline void set_client_ids(int index, const ::std::string& value);
  inline void set_client_ids(int index, const char* value);
  inline void set_client_ids(int index, const char* value, size_t size);
  inline ::std::string* add_client_ids();
  inline void add_client_ids(const ::std::string& value);
  inline void add_client_ids(const char* value);
  inline void add_client_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& client_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_client_ids();

  // @@protoc_insertion_point(class_scope:SvrTransferMsg)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 msgid_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::std::string> client_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrTransferMsg* default_instance_;
};
// -------------------------------------------------------------------

class SvrHeartbeatMsg : public ::google::protobuf::Message {
 public:
  SvrHeartbeatMsg();
  virtual ~SvrHeartbeatMsg();

  SvrHeartbeatMsg(const SvrHeartbeatMsg& from);

  inline SvrHeartbeatMsg& operator=(const SvrHeartbeatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrHeartbeatMsg& default_instance();

  void Swap(SvrHeartbeatMsg* other);

  // implements Message ----------------------------------------------

  SvrHeartbeatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrHeartbeatMsg& from);
  void MergeFrom(const SvrHeartbeatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrHeartbeatMsg)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrHeartbeatMsg* default_instance_;
};
// -------------------------------------------------------------------

class SvrInsertMsg : public ::google::protobuf::Message {
 public:
  SvrInsertMsg();
  virtual ~SvrInsertMsg();

  SvrInsertMsg(const SvrInsertMsg& from);

  inline SvrInsertMsg& operator=(const SvrInsertMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrInsertMsg& default_instance();

  void Swap(SvrInsertMsg* other);

  // implements Message ----------------------------------------------

  SvrInsertMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrInsertMsg& from);
  void MergeFrom(const SvrInsertMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // repeated string client_ids = 2;
  inline int client_ids_size() const;
  inline void clear_client_ids();
  static const int kClientIdsFieldNumber = 2;
  inline const ::std::string& client_ids(int index) const;
  inline ::std::string* mutable_client_ids(int index);
  inline void set_client_ids(int index, const ::std::string& value);
  inline void set_client_ids(int index, const char* value);
  inline void set_client_ids(int index, const char* value, size_t size);
  inline ::std::string* add_client_ids();
  inline void add_client_ids(const ::std::string& value);
  inline void add_client_ids(const char* value);
  inline void add_client_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& client_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_client_ids();

  // optional bytes msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int32 expire_time = 4;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 4;
  inline ::google::protobuf::int32 expire_time() const;
  inline void set_expire_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrInsertMsg)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> client_ids_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::int32 expire_time_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrInsertMsg* default_instance_;
};
// -------------------------------------------------------------------

class SvrAddress : public ::google::protobuf::Message {
 public:
  SvrAddress();
  virtual ~SvrAddress();

  SvrAddress(const SvrAddress& from);

  inline SvrAddress& operator=(const SvrAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrAddress& default_instance();

  void Swap(SvrAddress* other);

  // implements Message ----------------------------------------------

  SvrAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrAddress& from);
  void MergeFrom(const SvrAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 svr_type = 1;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 1;
  inline ::google::protobuf::int32 svr_type() const;
  inline void set_svr_type(::google::protobuf::int32 value);

  // optional int32 svr_id = 2;
  inline bool has_svr_id() const;
  inline void clear_svr_id();
  static const int kSvrIdFieldNumber = 2;
  inline ::google::protobuf::int32 svr_id() const;
  inline void set_svr_id(::google::protobuf::int32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrAddress)
 private:
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_svr_id();
  inline void clear_has_svr_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 svr_type_;
  ::google::protobuf::int32 svr_id_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrAddress* default_instance_;
};
// -------------------------------------------------------------------

class SvrConfigReq : public ::google::protobuf::Message {
 public:
  SvrConfigReq();
  virtual ~SvrConfigReq();

  SvrConfigReq(const SvrConfigReq& from);

  inline SvrConfigReq& operator=(const SvrConfigReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrConfigReq& default_instance();

  void Swap(SvrConfigReq* other);

  // implements Message ----------------------------------------------

  SvrConfigReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrConfigReq& from);
  void MergeFrom(const SvrConfigReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SvrAddress address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::SvrAddress& address() const;
  inline ::SvrAddress* mutable_address();
  inline ::SvrAddress* release_address();
  inline void set_allocated_address(::SvrAddress* address);

  // @@protoc_insertion_point(class_scope:SvrConfigReq)
 private:
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SvrAddress* address_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrConfigReq* default_instance_;
};
// -------------------------------------------------------------------

class SvrConfig : public ::google::protobuf::Message {
 public:
  SvrConfig();
  virtual ~SvrConfig();

  SvrConfig(const SvrConfig& from);

  inline SvrConfig& operator=(const SvrConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrConfig& default_instance();

  void Swap(SvrConfig* other);

  // implements Message ----------------------------------------------

  SvrConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrConfig& from);
  void MergeFrom(const SvrConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 log_type = 1;
  inline bool has_log_type() const;
  inline void clear_log_type();
  static const int kLogTypeFieldNumber = 1;
  inline ::google::protobuf::int32 log_type() const;
  inline void set_log_type(::google::protobuf::int32 value);

  // optional string log_dir = 2;
  inline bool has_log_dir() const;
  inline void clear_log_dir();
  static const int kLogDirFieldNumber = 2;
  inline const ::std::string& log_dir() const;
  inline void set_log_dir(const ::std::string& value);
  inline void set_log_dir(const char* value);
  inline void set_log_dir(const char* value, size_t size);
  inline ::std::string* mutable_log_dir();
  inline ::std::string* release_log_dir();
  inline void set_allocated_log_dir(::std::string* log_dir);

  // optional int32 log_level = 3;
  inline bool has_log_level() const;
  inline void clear_log_level();
  static const int kLogLevelFieldNumber = 3;
  inline ::google::protobuf::int32 log_level() const;
  inline void set_log_level(::google::protobuf::int32 value);

  // optional bytes log_config = 4;
  inline bool has_log_config() const;
  inline void clear_log_config();
  static const int kLogConfigFieldNumber = 4;
  inline const ::std::string& log_config() const;
  inline void set_log_config(const ::std::string& value);
  inline void set_log_config(const char* value);
  inline void set_log_config(const void* value, size_t size);
  inline ::std::string* mutable_log_config();
  inline ::std::string* release_log_config();
  inline void set_allocated_log_config(::std::string* log_config);

  // optional int32 client_outoftime = 21;
  inline bool has_client_outoftime() const;
  inline void clear_client_outoftime();
  static const int kClientOutoftimeFieldNumber = 21;
  inline ::google::protobuf::int32 client_outoftime() const;
  inline void set_client_outoftime(::google::protobuf::int32 value);

  // optional int32 http_listen = 31;
  inline bool has_http_listen() const;
  inline void clear_http_listen();
  static const int kHttpListenFieldNumber = 31;
  inline ::google::protobuf::int32 http_listen() const;
  inline void set_http_listen(::google::protobuf::int32 value);

  // optional string php_host = 32;
  inline bool has_php_host() const;
  inline void clear_php_host();
  static const int kPhpHostFieldNumber = 32;
  inline const ::std::string& php_host() const;
  inline void set_php_host(const ::std::string& value);
  inline void set_php_host(const char* value);
  inline void set_php_host(const char* value, size_t size);
  inline ::std::string* mutable_php_host();
  inline ::std::string* release_php_host();
  inline void set_allocated_php_host(::std::string* php_host);

  // optional int32 php_port = 33;
  inline bool has_php_port() const;
  inline void clear_php_port();
  static const int kPhpPortFieldNumber = 33;
  inline ::google::protobuf::int32 php_port() const;
  inline void set_php_port(::google::protobuf::int32 value);

  // optional string redis_ip = 41;
  inline bool has_redis_ip() const;
  inline void clear_redis_ip();
  static const int kRedisIpFieldNumber = 41;
  inline const ::std::string& redis_ip() const;
  inline void set_redis_ip(const ::std::string& value);
  inline void set_redis_ip(const char* value);
  inline void set_redis_ip(const char* value, size_t size);
  inline ::std::string* mutable_redis_ip();
  inline ::std::string* release_redis_ip();
  inline void set_allocated_redis_ip(::std::string* redis_ip);

  // optional int32 redis_port = 42;
  inline bool has_redis_port() const;
  inline void clear_redis_port();
  static const int kRedisPortFieldNumber = 42;
  inline ::google::protobuf::int32 redis_port() const;
  inline void set_redis_port(::google::protobuf::int32 value);

  // optional string env = 43;
  inline bool has_env() const;
  inline void clear_env();
  static const int kEnvFieldNumber = 43;
  inline const ::std::string& env() const;
  inline void set_env(const ::std::string& value);
  inline void set_env(const char* value);
  inline void set_env(const char* value, size_t size);
  inline ::std::string* mutable_env();
  inline ::std::string* release_env();
  inline void set_allocated_env(::std::string* env);

  // optional string password = 44;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 44;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:SvrConfig)
 private:
  inline void set_has_log_type();
  inline void clear_has_log_type();
  inline void set_has_log_dir();
  inline void clear_has_log_dir();
  inline void set_has_log_level();
  inline void clear_has_log_level();
  inline void set_has_log_config();
  inline void clear_has_log_config();
  inline void set_has_client_outoftime();
  inline void clear_has_client_outoftime();
  inline void set_has_http_listen();
  inline void clear_has_http_listen();
  inline void set_has_php_host();
  inline void clear_has_php_host();
  inline void set_has_php_port();
  inline void clear_has_php_port();
  inline void set_has_redis_ip();
  inline void clear_has_redis_ip();
  inline void set_has_redis_port();
  inline void clear_has_redis_port();
  inline void set_has_env();
  inline void clear_has_env();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* log_dir_;
  ::google::protobuf::int32 log_type_;
  ::google::protobuf::int32 log_level_;
  ::std::string* log_config_;
  ::google::protobuf::int32 client_outoftime_;
  ::google::protobuf::int32 http_listen_;
  ::std::string* php_host_;
  ::std::string* redis_ip_;
  ::google::protobuf::int32 php_port_;
  ::google::protobuf::int32 redis_port_;
  ::std::string* env_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrConfig* default_instance_;
};
// -------------------------------------------------------------------

class SvrConfigResp : public ::google::protobuf::Message {
 public:
  SvrConfigResp();
  virtual ~SvrConfigResp();

  SvrConfigResp(const SvrConfigResp& from);

  inline SvrConfigResp& operator=(const SvrConfigResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrConfigResp& default_instance();

  void Swap(SvrConfigResp* other);

  // implements Message ----------------------------------------------

  SvrConfigResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrConfigResp& from);
  void MergeFrom(const SvrConfigResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SvrConfig config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::SvrConfig& config() const;
  inline ::SvrConfig* mutable_config();
  inline ::SvrConfig* release_config();
  inline void set_allocated_config(::SvrConfig* config);

  // repeated .SvrAddress peer_addresses = 2;
  inline int peer_addresses_size() const;
  inline void clear_peer_addresses();
  static const int kPeerAddressesFieldNumber = 2;
  inline const ::SvrAddress& peer_addresses(int index) const;
  inline ::SvrAddress* mutable_peer_addresses(int index);
  inline ::SvrAddress* add_peer_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::SvrAddress >&
      peer_addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::SvrAddress >*
      mutable_peer_addresses();

  // @@protoc_insertion_point(class_scope:SvrConfigResp)
 private:
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SvrConfig* config_;
  ::google::protobuf::RepeatedPtrField< ::SvrAddress > peer_addresses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrConfigResp* default_instance_;
};
// -------------------------------------------------------------------

class SvrBroadcastAddress : public ::google::protobuf::Message {
 public:
  SvrBroadcastAddress();
  virtual ~SvrBroadcastAddress();

  SvrBroadcastAddress(const SvrBroadcastAddress& from);

  inline SvrBroadcastAddress& operator=(const SvrBroadcastAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrBroadcastAddress& default_instance();

  void Swap(SvrBroadcastAddress* other);

  // implements Message ----------------------------------------------

  SvrBroadcastAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrBroadcastAddress& from);
  void MergeFrom(const SvrBroadcastAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SvrAddress peer_addresses = 1;
  inline int peer_addresses_size() const;
  inline void clear_peer_addresses();
  static const int kPeerAddressesFieldNumber = 1;
  inline const ::SvrAddress& peer_addresses(int index) const;
  inline ::SvrAddress* mutable_peer_addresses(int index);
  inline ::SvrAddress* add_peer_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::SvrAddress >&
      peer_addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::SvrAddress >*
      mutable_peer_addresses();

  // @@protoc_insertion_point(class_scope:SvrBroadcastAddress)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SvrAddress > peer_addresses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrBroadcastAddress* default_instance_;
};
// -------------------------------------------------------------------

class SvrSyncAddress : public ::google::protobuf::Message {
 public:
  SvrSyncAddress();
  virtual ~SvrSyncAddress();

  SvrSyncAddress(const SvrSyncAddress& from);

  inline SvrSyncAddress& operator=(const SvrSyncAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrSyncAddress& default_instance();

  void Swap(SvrSyncAddress* other);

  // implements Message ----------------------------------------------

  SvrSyncAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrSyncAddress& from);
  void MergeFrom(const SvrSyncAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SvrAddress peer_addresses = 1;
  inline int peer_addresses_size() const;
  inline void clear_peer_addresses();
  static const int kPeerAddressesFieldNumber = 1;
  inline const ::SvrAddress& peer_addresses(int index) const;
  inline ::SvrAddress* mutable_peer_addresses(int index);
  inline ::SvrAddress* add_peer_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::SvrAddress >&
      peer_addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::SvrAddress >*
      mutable_peer_addresses();

  // @@protoc_insertion_point(class_scope:SvrSyncAddress)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SvrAddress > peer_addresses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fproto_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fproto_5fserver_2eproto();

  void InitAsDefaultInstance();
  static SvrSyncAddress* default_instance_;
};
// ===================================================================


// ===================================================================

// SvrMsgHead

// optional .SvrMsgType type = 1;
inline bool SvrMsgHead::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrMsgHead::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrMsgHead::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrMsgHead::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SvrMsgType SvrMsgHead::type() const {
  return static_cast< ::SvrMsgType >(type_);
}
inline void SvrMsgHead::set_type(::SvrMsgType value) {
  assert(::SvrMsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 src_svr_type = 4;
inline bool SvrMsgHead::has_src_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrMsgHead::set_has_src_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrMsgHead::clear_has_src_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrMsgHead::clear_src_svr_type() {
  src_svr_type_ = 0;
  clear_has_src_svr_type();
}
inline ::google::protobuf::int32 SvrMsgHead::src_svr_type() const {
  return src_svr_type_;
}
inline void SvrMsgHead::set_src_svr_type(::google::protobuf::int32 value) {
  set_has_src_svr_type();
  src_svr_type_ = value;
}

// optional int32 src_svr_id = 5;
inline bool SvrMsgHead::has_src_svr_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrMsgHead::set_has_src_svr_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrMsgHead::clear_has_src_svr_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrMsgHead::clear_src_svr_id() {
  src_svr_id_ = 0;
  clear_has_src_svr_id();
}
inline ::google::protobuf::int32 SvrMsgHead::src_svr_id() const {
  return src_svr_id_;
}
inline void SvrMsgHead::set_src_svr_id(::google::protobuf::int32 value) {
  set_has_src_svr_id();
  src_svr_id_ = value;
}

// optional int32 dst_svr_type = 6;
inline bool SvrMsgHead::has_dst_svr_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SvrMsgHead::set_has_dst_svr_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SvrMsgHead::clear_has_dst_svr_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SvrMsgHead::clear_dst_svr_type() {
  dst_svr_type_ = 0;
  clear_has_dst_svr_type();
}
inline ::google::protobuf::int32 SvrMsgHead::dst_svr_type() const {
  return dst_svr_type_;
}
inline void SvrMsgHead::set_dst_svr_type(::google::protobuf::int32 value) {
  set_has_dst_svr_type();
  dst_svr_type_ = value;
}

// optional int32 dst_svr_id = 7;
inline bool SvrMsgHead::has_dst_svr_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SvrMsgHead::set_has_dst_svr_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SvrMsgHead::clear_has_dst_svr_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SvrMsgHead::clear_dst_svr_id() {
  dst_svr_id_ = 0;
  clear_has_dst_svr_id();
}
inline ::google::protobuf::int32 SvrMsgHead::dst_svr_id() const {
  return dst_svr_id_;
}
inline void SvrMsgHead::set_dst_svr_id(::google::protobuf::int32 value) {
  set_has_dst_svr_id();
  dst_svr_id_ = value;
}

// optional int32 proxy_svr_id = 8;
inline bool SvrMsgHead::has_proxy_svr_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SvrMsgHead::set_has_proxy_svr_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SvrMsgHead::clear_has_proxy_svr_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SvrMsgHead::clear_proxy_svr_id() {
  proxy_svr_id_ = 0;
  clear_has_proxy_svr_id();
}
inline ::google::protobuf::int32 SvrMsgHead::proxy_svr_id() const {
  return proxy_svr_id_;
}
inline void SvrMsgHead::set_proxy_svr_id(::google::protobuf::int32 value) {
  set_has_proxy_svr_id();
  proxy_svr_id_ = value;
}

// optional bool is_broadcast = 9;
inline bool SvrMsgHead::has_is_broadcast() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SvrMsgHead::set_has_is_broadcast() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SvrMsgHead::clear_has_is_broadcast() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SvrMsgHead::clear_is_broadcast() {
  is_broadcast_ = false;
  clear_has_is_broadcast();
}
inline bool SvrMsgHead::is_broadcast() const {
  return is_broadcast_;
}
inline void SvrMsgHead::set_is_broadcast(bool value) {
  set_has_is_broadcast();
  is_broadcast_ = value;
}

// -------------------------------------------------------------------

// SvrMsg

// optional .SvrMsgHead head = 1;
inline bool SvrMsg::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrMsg::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrMsg::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrMsg::clear_head() {
  if (head_ != NULL) head_->::SvrMsgHead::Clear();
  clear_has_head();
}
inline const ::SvrMsgHead& SvrMsg::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::SvrMsgHead* SvrMsg::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::SvrMsgHead;
  return head_;
}
inline ::SvrMsgHead* SvrMsg::release_head() {
  clear_has_head();
  ::SvrMsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void SvrMsg::set_allocated_head(::SvrMsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional bytes body = 2;
inline bool SvrMsg::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrMsg::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrMsg::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrMsg::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& SvrMsg::body() const {
  return *body_;
}
inline void SvrMsg::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void SvrMsg::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void SvrMsg::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrMsg::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* SvrMsg::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrMsg::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SvrRegRequest

// optional int32 svr_id = 1;
inline bool SvrRegRequest::has_svr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrRegRequest::set_has_svr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrRegRequest::clear_has_svr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrRegRequest::clear_svr_id() {
  svr_id_ = 0;
  clear_has_svr_id();
}
inline ::google::protobuf::int32 SvrRegRequest::svr_id() const {
  return svr_id_;
}
inline void SvrRegRequest::set_svr_id(::google::protobuf::int32 value) {
  set_has_svr_id();
  svr_id_ = value;
}

// optional int32 svr_type = 2;
inline bool SvrRegRequest::has_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrRegRequest::set_has_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrRegRequest::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrRegRequest::clear_svr_type() {
  svr_type_ = 0;
  clear_has_svr_type();
}
inline ::google::protobuf::int32 SvrRegRequest::svr_type() const {
  return svr_type_;
}
inline void SvrRegRequest::set_svr_type(::google::protobuf::int32 value) {
  set_has_svr_type();
  svr_type_ = value;
}

// -------------------------------------------------------------------

// SvrRegResponse

// optional .ResultCode result = 1;
inline bool SvrRegResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrRegResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrRegResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrRegResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ResultCode SvrRegResponse::result() const {
  return static_cast< ::ResultCode >(result_);
}
inline void SvrRegResponse::set_result(::ResultCode value) {
  assert(::ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SvrUpdateUser

// optional int32 connector_id = 1;
inline bool SvrUpdateUser::has_connector_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrUpdateUser::set_has_connector_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrUpdateUser::clear_has_connector_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrUpdateUser::clear_connector_id() {
  connector_id_ = 0;
  clear_has_connector_id();
}
inline ::google::protobuf::int32 SvrUpdateUser::connector_id() const {
  return connector_id_;
}
inline void SvrUpdateUser::set_connector_id(::google::protobuf::int32 value) {
  set_has_connector_id();
  connector_id_ = value;
}

// optional string client_id = 2;
inline bool SvrUpdateUser::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrUpdateUser::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrUpdateUser::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrUpdateUser::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& SvrUpdateUser::client_id() const {
  return *client_id_;
}
inline void SvrUpdateUser::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrUpdateUser::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrUpdateUser::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrUpdateUser::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* SvrUpdateUser::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrUpdateUser::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_online = 3;
inline bool SvrUpdateUser::has_is_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrUpdateUser::set_has_is_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrUpdateUser::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrUpdateUser::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool SvrUpdateUser::is_online() const {
  return is_online_;
}
inline void SvrUpdateUser::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// SvrKickUser

// optional string client_id = 1;
inline bool SvrKickUser::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrKickUser::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrKickUser::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrKickUser::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& SvrKickUser::client_id() const {
  return *client_id_;
}
inline void SvrKickUser::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrKickUser::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrKickUser::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrKickUser::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* SvrKickUser::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrKickUser::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SvrUserMsgAck

// optional int64 msgid = 1;
inline bool SvrUserMsgAck::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrUserMsgAck::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrUserMsgAck::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrUserMsgAck::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 SvrUserMsgAck::msgid() const {
  return msgid_;
}
inline void SvrUserMsgAck::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional string client_id = 2;
inline bool SvrUserMsgAck::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrUserMsgAck::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrUserMsgAck::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrUserMsgAck::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& SvrUserMsgAck::client_id() const {
  return *client_id_;
}
inline void SvrUserMsgAck::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrUserMsgAck::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrUserMsgAck::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrUserMsgAck::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* SvrUserMsgAck::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrUserMsgAck::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ResultCode code = 3;
inline bool SvrUserMsgAck::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrUserMsgAck::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrUserMsgAck::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrUserMsgAck::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::ResultCode SvrUserMsgAck::code() const {
  return static_cast< ::ResultCode >(code_);
}
inline void SvrUserMsgAck::set_code(::ResultCode value) {
  assert(::ResultCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// SvrUserReadMsg

// optional int64 msgid = 1;
inline bool SvrUserReadMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrUserReadMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrUserReadMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrUserReadMsg::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 SvrUserReadMsg::msgid() const {
  return msgid_;
}
inline void SvrUserReadMsg::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional string client_id = 2;
inline bool SvrUserReadMsg::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrUserReadMsg::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrUserReadMsg::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrUserReadMsg::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& SvrUserReadMsg::client_id() const {
  return *client_id_;
}
inline void SvrUserReadMsg::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrUserReadMsg::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void SvrUserReadMsg::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrUserReadMsg::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* SvrUserReadMsg::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrUserReadMsg::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SvrTransferMsg

// optional int64 msgid = 1;
inline bool SvrTransferMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrTransferMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrTransferMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrTransferMsg::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 SvrTransferMsg::msgid() const {
  return msgid_;
}
inline void SvrTransferMsg::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional bytes content = 2;
inline bool SvrTransferMsg::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrTransferMsg::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrTransferMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrTransferMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SvrTransferMsg::content() const {
  return *content_;
}
inline void SvrTransferMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SvrTransferMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SvrTransferMsg::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrTransferMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SvrTransferMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrTransferMsg::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string client_ids = 3;
inline int SvrTransferMsg::client_ids_size() const {
  return client_ids_.size();
}
inline void SvrTransferMsg::clear_client_ids() {
  client_ids_.Clear();
}
inline const ::std::string& SvrTransferMsg::client_ids(int index) const {
  return client_ids_.Get(index);
}
inline ::std::string* SvrTransferMsg::mutable_client_ids(int index) {
  return client_ids_.Mutable(index);
}
inline void SvrTransferMsg::set_client_ids(int index, const ::std::string& value) {
  client_ids_.Mutable(index)->assign(value);
}
inline void SvrTransferMsg::set_client_ids(int index, const char* value) {
  client_ids_.Mutable(index)->assign(value);
}
inline void SvrTransferMsg::set_client_ids(int index, const char* value, size_t size) {
  client_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrTransferMsg::add_client_ids() {
  return client_ids_.Add();
}
inline void SvrTransferMsg::add_client_ids(const ::std::string& value) {
  client_ids_.Add()->assign(value);
}
inline void SvrTransferMsg::add_client_ids(const char* value) {
  client_ids_.Add()->assign(value);
}
inline void SvrTransferMsg::add_client_ids(const char* value, size_t size) {
  client_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SvrTransferMsg::client_ids() const {
  return client_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SvrTransferMsg::mutable_client_ids() {
  return &client_ids_;
}

// -------------------------------------------------------------------

// SvrHeartbeatMsg

// optional int64 time = 1;
inline bool SvrHeartbeatMsg::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrHeartbeatMsg::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrHeartbeatMsg::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrHeartbeatMsg::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 SvrHeartbeatMsg::time() const {
  return time_;
}
inline void SvrHeartbeatMsg::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// SvrInsertMsg

// optional uint32 msgid = 1;
inline bool SvrInsertMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrInsertMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrInsertMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrInsertMsg::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 SvrInsertMsg::msgid() const {
  return msgid_;
}
inline void SvrInsertMsg::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// repeated string client_ids = 2;
inline int SvrInsertMsg::client_ids_size() const {
  return client_ids_.size();
}
inline void SvrInsertMsg::clear_client_ids() {
  client_ids_.Clear();
}
inline const ::std::string& SvrInsertMsg::client_ids(int index) const {
  return client_ids_.Get(index);
}
inline ::std::string* SvrInsertMsg::mutable_client_ids(int index) {
  return client_ids_.Mutable(index);
}
inline void SvrInsertMsg::set_client_ids(int index, const ::std::string& value) {
  client_ids_.Mutable(index)->assign(value);
}
inline void SvrInsertMsg::set_client_ids(int index, const char* value) {
  client_ids_.Mutable(index)->assign(value);
}
inline void SvrInsertMsg::set_client_ids(int index, const char* value, size_t size) {
  client_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrInsertMsg::add_client_ids() {
  return client_ids_.Add();
}
inline void SvrInsertMsg::add_client_ids(const ::std::string& value) {
  client_ids_.Add()->assign(value);
}
inline void SvrInsertMsg::add_client_ids(const char* value) {
  client_ids_.Add()->assign(value);
}
inline void SvrInsertMsg::add_client_ids(const char* value, size_t size) {
  client_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SvrInsertMsg::client_ids() const {
  return client_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SvrInsertMsg::mutable_client_ids() {
  return &client_ids_;
}

// optional bytes msg = 3;
inline bool SvrInsertMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrInsertMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrInsertMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrInsertMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& SvrInsertMsg::msg() const {
  return *msg_;
}
inline void SvrInsertMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SvrInsertMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SvrInsertMsg::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrInsertMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* SvrInsertMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrInsertMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 expire_time = 4;
inline bool SvrInsertMsg::has_expire_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SvrInsertMsg::set_has_expire_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SvrInsertMsg::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SvrInsertMsg::clear_expire_time() {
  expire_time_ = 0;
  clear_has_expire_time();
}
inline ::google::protobuf::int32 SvrInsertMsg::expire_time() const {
  return expire_time_;
}
inline void SvrInsertMsg::set_expire_time(::google::protobuf::int32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// -------------------------------------------------------------------

// SvrAddress

// optional int32 svr_type = 1;
inline bool SvrAddress::has_svr_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrAddress::set_has_svr_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrAddress::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrAddress::clear_svr_type() {
  svr_type_ = 0;
  clear_has_svr_type();
}
inline ::google::protobuf::int32 SvrAddress::svr_type() const {
  return svr_type_;
}
inline void SvrAddress::set_svr_type(::google::protobuf::int32 value) {
  set_has_svr_type();
  svr_type_ = value;
}

// optional int32 svr_id = 2;
inline bool SvrAddress::has_svr_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrAddress::set_has_svr_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrAddress::clear_has_svr_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrAddress::clear_svr_id() {
  svr_id_ = 0;
  clear_has_svr_id();
}
inline ::google::protobuf::int32 SvrAddress::svr_id() const {
  return svr_id_;
}
inline void SvrAddress::set_svr_id(::google::protobuf::int32 value) {
  set_has_svr_id();
  svr_id_ = value;
}

// optional string ip = 3;
inline bool SvrAddress::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrAddress::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrAddress::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrAddress::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SvrAddress::ip() const {
  return *ip_;
}
inline void SvrAddress::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SvrAddress::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SvrAddress::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrAddress::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SvrAddress::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrAddress::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool SvrAddress::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SvrAddress::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SvrAddress::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SvrAddress::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 SvrAddress::port() const {
  return port_;
}
inline void SvrAddress::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// SvrConfigReq

// optional .SvrAddress address = 1;
inline bool SvrConfigReq::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrConfigReq::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrConfigReq::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrConfigReq::clear_address() {
  if (address_ != NULL) address_->::SvrAddress::Clear();
  clear_has_address();
}
inline const ::SvrAddress& SvrConfigReq::address() const {
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::SvrAddress* SvrConfigReq::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::SvrAddress;
  return address_;
}
inline ::SvrAddress* SvrConfigReq::release_address() {
  clear_has_address();
  ::SvrAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline void SvrConfigReq::set_allocated_address(::SvrAddress* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
}

// -------------------------------------------------------------------

// SvrConfig

// optional int32 log_type = 1;
inline bool SvrConfig::has_log_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrConfig::set_has_log_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrConfig::clear_has_log_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrConfig::clear_log_type() {
  log_type_ = 0;
  clear_has_log_type();
}
inline ::google::protobuf::int32 SvrConfig::log_type() const {
  return log_type_;
}
inline void SvrConfig::set_log_type(::google::protobuf::int32 value) {
  set_has_log_type();
  log_type_ = value;
}

// optional string log_dir = 2;
inline bool SvrConfig::has_log_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrConfig::set_has_log_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrConfig::clear_has_log_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrConfig::clear_log_dir() {
  if (log_dir_ != &::google::protobuf::internal::kEmptyString) {
    log_dir_->clear();
  }
  clear_has_log_dir();
}
inline const ::std::string& SvrConfig::log_dir() const {
  return *log_dir_;
}
inline void SvrConfig::set_log_dir(const ::std::string& value) {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::kEmptyString) {
    log_dir_ = new ::std::string;
  }
  log_dir_->assign(value);
}
inline void SvrConfig::set_log_dir(const char* value) {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::kEmptyString) {
    log_dir_ = new ::std::string;
  }
  log_dir_->assign(value);
}
inline void SvrConfig::set_log_dir(const char* value, size_t size) {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::kEmptyString) {
    log_dir_ = new ::std::string;
  }
  log_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrConfig::mutable_log_dir() {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::kEmptyString) {
    log_dir_ = new ::std::string;
  }
  return log_dir_;
}
inline ::std::string* SvrConfig::release_log_dir() {
  clear_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_dir_;
    log_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrConfig::set_allocated_log_dir(::std::string* log_dir) {
  if (log_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete log_dir_;
  }
  if (log_dir) {
    set_has_log_dir();
    log_dir_ = log_dir;
  } else {
    clear_has_log_dir();
    log_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 log_level = 3;
inline bool SvrConfig::has_log_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrConfig::set_has_log_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrConfig::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrConfig::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
inline ::google::protobuf::int32 SvrConfig::log_level() const {
  return log_level_;
}
inline void SvrConfig::set_log_level(::google::protobuf::int32 value) {
  set_has_log_level();
  log_level_ = value;
}

// optional bytes log_config = 4;
inline bool SvrConfig::has_log_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SvrConfig::set_has_log_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SvrConfig::clear_has_log_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SvrConfig::clear_log_config() {
  if (log_config_ != &::google::protobuf::internal::kEmptyString) {
    log_config_->clear();
  }
  clear_has_log_config();
}
inline const ::std::string& SvrConfig::log_config() const {
  return *log_config_;
}
inline void SvrConfig::set_log_config(const ::std::string& value) {
  set_has_log_config();
  if (log_config_ == &::google::protobuf::internal::kEmptyString) {
    log_config_ = new ::std::string;
  }
  log_config_->assign(value);
}
inline void SvrConfig::set_log_config(const char* value) {
  set_has_log_config();
  if (log_config_ == &::google::protobuf::internal::kEmptyString) {
    log_config_ = new ::std::string;
  }
  log_config_->assign(value);
}
inline void SvrConfig::set_log_config(const void* value, size_t size) {
  set_has_log_config();
  if (log_config_ == &::google::protobuf::internal::kEmptyString) {
    log_config_ = new ::std::string;
  }
  log_config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrConfig::mutable_log_config() {
  set_has_log_config();
  if (log_config_ == &::google::protobuf::internal::kEmptyString) {
    log_config_ = new ::std::string;
  }
  return log_config_;
}
inline ::std::string* SvrConfig::release_log_config() {
  clear_has_log_config();
  if (log_config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_config_;
    log_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrConfig::set_allocated_log_config(::std::string* log_config) {
  if (log_config_ != &::google::protobuf::internal::kEmptyString) {
    delete log_config_;
  }
  if (log_config) {
    set_has_log_config();
    log_config_ = log_config;
  } else {
    clear_has_log_config();
    log_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 client_outoftime = 21;
inline bool SvrConfig::has_client_outoftime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SvrConfig::set_has_client_outoftime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SvrConfig::clear_has_client_outoftime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SvrConfig::clear_client_outoftime() {
  client_outoftime_ = 0;
  clear_has_client_outoftime();
}
inline ::google::protobuf::int32 SvrConfig::client_outoftime() const {
  return client_outoftime_;
}
inline void SvrConfig::set_client_outoftime(::google::protobuf::int32 value) {
  set_has_client_outoftime();
  client_outoftime_ = value;
}

// optional int32 http_listen = 31;
inline bool SvrConfig::has_http_listen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SvrConfig::set_has_http_listen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SvrConfig::clear_has_http_listen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SvrConfig::clear_http_listen() {
  http_listen_ = 0;
  clear_has_http_listen();
}
inline ::google::protobuf::int32 SvrConfig::http_listen() const {
  return http_listen_;
}
inline void SvrConfig::set_http_listen(::google::protobuf::int32 value) {
  set_has_http_listen();
  http_listen_ = value;
}

// optional string php_host = 32;
inline bool SvrConfig::has_php_host() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SvrConfig::set_has_php_host() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SvrConfig::clear_has_php_host() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SvrConfig::clear_php_host() {
  if (php_host_ != &::google::protobuf::internal::kEmptyString) {
    php_host_->clear();
  }
  clear_has_php_host();
}
inline const ::std::string& SvrConfig::php_host() const {
  return *php_host_;
}
inline void SvrConfig::set_php_host(const ::std::string& value) {
  set_has_php_host();
  if (php_host_ == &::google::protobuf::internal::kEmptyString) {
    php_host_ = new ::std::string;
  }
  php_host_->assign(value);
}
inline void SvrConfig::set_php_host(const char* value) {
  set_has_php_host();
  if (php_host_ == &::google::protobuf::internal::kEmptyString) {
    php_host_ = new ::std::string;
  }
  php_host_->assign(value);
}
inline void SvrConfig::set_php_host(const char* value, size_t size) {
  set_has_php_host();
  if (php_host_ == &::google::protobuf::internal::kEmptyString) {
    php_host_ = new ::std::string;
  }
  php_host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrConfig::mutable_php_host() {
  set_has_php_host();
  if (php_host_ == &::google::protobuf::internal::kEmptyString) {
    php_host_ = new ::std::string;
  }
  return php_host_;
}
inline ::std::string* SvrConfig::release_php_host() {
  clear_has_php_host();
  if (php_host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = php_host_;
    php_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrConfig::set_allocated_php_host(::std::string* php_host) {
  if (php_host_ != &::google::protobuf::internal::kEmptyString) {
    delete php_host_;
  }
  if (php_host) {
    set_has_php_host();
    php_host_ = php_host;
  } else {
    clear_has_php_host();
    php_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 php_port = 33;
inline bool SvrConfig::has_php_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SvrConfig::set_has_php_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SvrConfig::clear_has_php_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SvrConfig::clear_php_port() {
  php_port_ = 0;
  clear_has_php_port();
}
inline ::google::protobuf::int32 SvrConfig::php_port() const {
  return php_port_;
}
inline void SvrConfig::set_php_port(::google::protobuf::int32 value) {
  set_has_php_port();
  php_port_ = value;
}

// optional string redis_ip = 41;
inline bool SvrConfig::has_redis_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SvrConfig::set_has_redis_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SvrConfig::clear_has_redis_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SvrConfig::clear_redis_ip() {
  if (redis_ip_ != &::google::protobuf::internal::kEmptyString) {
    redis_ip_->clear();
  }
  clear_has_redis_ip();
}
inline const ::std::string& SvrConfig::redis_ip() const {
  return *redis_ip_;
}
inline void SvrConfig::set_redis_ip(const ::std::string& value) {
  set_has_redis_ip();
  if (redis_ip_ == &::google::protobuf::internal::kEmptyString) {
    redis_ip_ = new ::std::string;
  }
  redis_ip_->assign(value);
}
inline void SvrConfig::set_redis_ip(const char* value) {
  set_has_redis_ip();
  if (redis_ip_ == &::google::protobuf::internal::kEmptyString) {
    redis_ip_ = new ::std::string;
  }
  redis_ip_->assign(value);
}
inline void SvrConfig::set_redis_ip(const char* value, size_t size) {
  set_has_redis_ip();
  if (redis_ip_ == &::google::protobuf::internal::kEmptyString) {
    redis_ip_ = new ::std::string;
  }
  redis_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrConfig::mutable_redis_ip() {
  set_has_redis_ip();
  if (redis_ip_ == &::google::protobuf::internal::kEmptyString) {
    redis_ip_ = new ::std::string;
  }
  return redis_ip_;
}
inline ::std::string* SvrConfig::release_redis_ip() {
  clear_has_redis_ip();
  if (redis_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = redis_ip_;
    redis_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrConfig::set_allocated_redis_ip(::std::string* redis_ip) {
  if (redis_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete redis_ip_;
  }
  if (redis_ip) {
    set_has_redis_ip();
    redis_ip_ = redis_ip;
  } else {
    clear_has_redis_ip();
    redis_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 redis_port = 42;
inline bool SvrConfig::has_redis_port() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SvrConfig::set_has_redis_port() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SvrConfig::clear_has_redis_port() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SvrConfig::clear_redis_port() {
  redis_port_ = 0;
  clear_has_redis_port();
}
inline ::google::protobuf::int32 SvrConfig::redis_port() const {
  return redis_port_;
}
inline void SvrConfig::set_redis_port(::google::protobuf::int32 value) {
  set_has_redis_port();
  redis_port_ = value;
}

// optional string env = 43;
inline bool SvrConfig::has_env() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SvrConfig::set_has_env() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SvrConfig::clear_has_env() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SvrConfig::clear_env() {
  if (env_ != &::google::protobuf::internal::kEmptyString) {
    env_->clear();
  }
  clear_has_env();
}
inline const ::std::string& SvrConfig::env() const {
  return *env_;
}
inline void SvrConfig::set_env(const ::std::string& value) {
  set_has_env();
  if (env_ == &::google::protobuf::internal::kEmptyString) {
    env_ = new ::std::string;
  }
  env_->assign(value);
}
inline void SvrConfig::set_env(const char* value) {
  set_has_env();
  if (env_ == &::google::protobuf::internal::kEmptyString) {
    env_ = new ::std::string;
  }
  env_->assign(value);
}
inline void SvrConfig::set_env(const char* value, size_t size) {
  set_has_env();
  if (env_ == &::google::protobuf::internal::kEmptyString) {
    env_ = new ::std::string;
  }
  env_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrConfig::mutable_env() {
  set_has_env();
  if (env_ == &::google::protobuf::internal::kEmptyString) {
    env_ = new ::std::string;
  }
  return env_;
}
inline ::std::string* SvrConfig::release_env() {
  clear_has_env();
  if (env_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = env_;
    env_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrConfig::set_allocated_env(::std::string* env) {
  if (env_ != &::google::protobuf::internal::kEmptyString) {
    delete env_;
  }
  if (env) {
    set_has_env();
    env_ = env;
  } else {
    clear_has_env();
    env_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 44;
inline bool SvrConfig::has_password() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SvrConfig::set_has_password() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SvrConfig::clear_has_password() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SvrConfig::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SvrConfig::password() const {
  return *password_;
}
inline void SvrConfig::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SvrConfig::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SvrConfig::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrConfig::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SvrConfig::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrConfig::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SvrConfigResp

// optional .SvrConfig config = 1;
inline bool SvrConfigResp::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrConfigResp::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrConfigResp::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrConfigResp::clear_config() {
  if (config_ != NULL) config_->::SvrConfig::Clear();
  clear_has_config();
}
inline const ::SvrConfig& SvrConfigResp::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::SvrConfig* SvrConfigResp::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::SvrConfig;
  return config_;
}
inline ::SvrConfig* SvrConfigResp::release_config() {
  clear_has_config();
  ::SvrConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void SvrConfigResp::set_allocated_config(::SvrConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// repeated .SvrAddress peer_addresses = 2;
inline int SvrConfigResp::peer_addresses_size() const {
  return peer_addresses_.size();
}
inline void SvrConfigResp::clear_peer_addresses() {
  peer_addresses_.Clear();
}
inline const ::SvrAddress& SvrConfigResp::peer_addresses(int index) const {
  return peer_addresses_.Get(index);
}
inline ::SvrAddress* SvrConfigResp::mutable_peer_addresses(int index) {
  return peer_addresses_.Mutable(index);
}
inline ::SvrAddress* SvrConfigResp::add_peer_addresses() {
  return peer_addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SvrAddress >&
SvrConfigResp::peer_addresses() const {
  return peer_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::SvrAddress >*
SvrConfigResp::mutable_peer_addresses() {
  return &peer_addresses_;
}

// -------------------------------------------------------------------

// SvrBroadcastAddress

// repeated .SvrAddress peer_addresses = 1;
inline int SvrBroadcastAddress::peer_addresses_size() const {
  return peer_addresses_.size();
}
inline void SvrBroadcastAddress::clear_peer_addresses() {
  peer_addresses_.Clear();
}
inline const ::SvrAddress& SvrBroadcastAddress::peer_addresses(int index) const {
  return peer_addresses_.Get(index);
}
inline ::SvrAddress* SvrBroadcastAddress::mutable_peer_addresses(int index) {
  return peer_addresses_.Mutable(index);
}
inline ::SvrAddress* SvrBroadcastAddress::add_peer_addresses() {
  return peer_addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SvrAddress >&
SvrBroadcastAddress::peer_addresses() const {
  return peer_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::SvrAddress >*
SvrBroadcastAddress::mutable_peer_addresses() {
  return &peer_addresses_;
}

// -------------------------------------------------------------------

// SvrSyncAddress

// repeated .SvrAddress peer_addresses = 1;
inline int SvrSyncAddress::peer_addresses_size() const {
  return peer_addresses_.size();
}
inline void SvrSyncAddress::clear_peer_addresses() {
  peer_addresses_.Clear();
}
inline const ::SvrAddress& SvrSyncAddress::peer_addresses(int index) const {
  return peer_addresses_.Get(index);
}
inline ::SvrAddress* SvrSyncAddress::mutable_peer_addresses(int index) {
  return peer_addresses_.Mutable(index);
}
inline ::SvrAddress* SvrSyncAddress::add_peer_addresses() {
  return peer_addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SvrAddress >&
SvrSyncAddress::peer_addresses() const {
  return peer_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::SvrAddress >*
SvrSyncAddress::mutable_peer_addresses() {
  return &peer_addresses_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerType>() {
  return ::ServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SvrMsgType>() {
  return ::SvrMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_push_5fproto_5fserver_2eproto__INCLUDED
